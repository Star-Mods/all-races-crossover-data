include "TriggerLibs/NativeLib"
include "LibScio"
include "LibD4966BDA_h"
include "LibSPPN_h"

include "LibTIBW_h"

//--------------------------------------------------------------------------------------------------
// Library: Mods - CNC
//--------------------------------------------------------------------------------------------------
// External Library Initialization
void libTIBW_InitLibraries () {
    libNtve_InitVariables();
    libScio_InitVariables();
    libD4966BDA_InitVariables();
    libSPPN_InitVariables();
}

// Variable Initialization
bool libTIBW_InitVariables_completed = false;

void libTIBW_InitVariables () {
    int init_i;

    if (libTIBW_InitVariables_completed) {
        return;
    }

    libTIBW_InitVariables_completed = true;

    for (init_i = 0; init_i <= libTIBW_gv_platformMaxCountRoyalGuardExperienceGainingUnitGroupReturnedworkunitgroupPickedupweaponsetWeaponPickupUnitGroupStarChargeLevel; init_i += 1) {
        libTIBW_gv_bomberPFUnitsGroupRoyalGuardExperienceGainingUnitGroupReturnedworkunitgroupPickedupweaponsetWeaponPickupUnitGroupStarChargeLevel[init_i] = UnitGroupEmpty();
    }
    libTIBW_gv_bomberPlatformTempGroup = UnitGroupEmpty();
    libTIBW_gv_bomberFighterDebugGroup = UnitGroupEmpty();
    libTIBW_gv_bomberFighterTempGroup = UnitGroupEmpty();
    libTIBW_gv_nODCommandPanl = c_invalidDialogControlId;
    libTIBW_gv_nODCommandPanelDialog = c_invalidDialogId;
    libTIBW_gv_mCVDeploymentPanelRoyalGuardExperienceGainingUnitGroupReturnedworkunitgroupPickedupweaponsetWeaponPickupUnitGroupStarChargeLevel = c_invalidDialogControlId;
    libTIBW_gv_mCVDeploymentTip = c_invalidDialogControlId;
    libTIBW_gv_decoration = c_invalidDialogControlId;
    libTIBW_gv_mCVPanel = c_invalidDialogId;
    libTIBW_gv_cNC_TP_DropPod_Units = UnitGroupEmpty();
}

// Presets
// Functions
void libTIBW_gf_ApplyPlayerVoicePack (int lp_player, string lp_voiceID) {
    // Variable Declarations
    string lv_voicePackReward;

    // Automatic Variable Declarations
    int auto7577C56C_catalog;
    string auto7577C56C_entry;
    string auto7577C56C_fieldPath;
    int auto7577C56C_player;
    int auto7577C56C_i;
    int auto1B59D74B_ae;
    int auto1B59D74B_var;

    // Variable Initialization
    lv_voicePackReward = "";

    // Implementation
    auto7577C56C_catalog = c_gameCatalogVoicePack;
    auto7577C56C_entry = lp_voiceID;
    auto7577C56C_fieldPath = "UnlockedRewardArray";
    auto7577C56C_player = lp_player;
    auto7577C56C_i = 0;
    for ( ; auto7577C56C_i <= CatalogFieldValueCount(c_gameCatalogVoicePack,auto7577C56C_entry,auto7577C56C_fieldPath,auto7577C56C_player)-1 ; auto7577C56C_i += 1 ) {
        lv_voicePackReward = CatalogFieldValueGet(c_gameCatalogVoicePack,auto7577C56C_entry,auto7577C56C_fieldPath+"["+IntToString(auto7577C56C_i)+"]",auto7577C56C_player);
        auto1B59D74B_ae = (CatalogFieldValueCount(c_gameCatalogReward, lv_voicePackReward, "ReplacementArray", lp_player) - 1);
        auto1B59D74B_var = 0;
        for ( ; auto1B59D74B_var <= auto1B59D74B_ae; auto1B59D74B_var += 1 ) {
            CatalogLinkReplace(lp_player, c_gameCatalogSound, CatalogFieldValueGet(c_gameCatalogReward, lv_voicePackReward, "ReplacementArray[" + IntToString(auto1B59D74B_var) + "].From", lp_player), CatalogFieldValueGet(c_gameCatalogReward, lv_voicePackReward, "ReplacementArray[" + IntToString(auto1B59D74B_var) + "].To", lp_player));
        }
    }
}

trigger auto_libTIBW_gf_NodAirRaid_Trigger = null;
unit auto_libTIBW_gf_NodAirRaid_lp_unit;
region auto_libTIBW_gf_NodAirRaid_lp_area;

void libTIBW_gf_NodAirRaid (unit lp_unit, region lp_area) {
    auto_libTIBW_gf_NodAirRaid_lp_unit = lp_unit;
    auto_libTIBW_gf_NodAirRaid_lp_area = lp_area;

    if (auto_libTIBW_gf_NodAirRaid_Trigger == null) {
        auto_libTIBW_gf_NodAirRaid_Trigger = TriggerCreate("auto_libTIBW_gf_NodAirRaid_TriggerFunc");
    }

    TriggerExecute(auto_libTIBW_gf_NodAirRaid_Trigger, false, false);
}

bool auto_libTIBW_gf_NodAirRaid_TriggerFunc (bool testConds, bool runActions) {
    unit lp_unit = auto_libTIBW_gf_NodAirRaid_lp_unit;
    region lp_area = auto_libTIBW_gf_NodAirRaid_lp_area;

    // Variable Declarations
    unit lv_jTargetUnit;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    Wait(2.0, c_timeGame);
    UnitIssueOrder(lp_unit, OrderTargetingPoint(AbilityCommand("VertigoBomb", 0), RegionRandomPoint(lp_area)), c_orderQueueAddToEnd);
    return true;
}

void libTIBW_gf_ShowhideNodtoppanel (bool lp_showHide, int lp_player) {
    // Automatic Variable Declarations
    bool auto18566EEF_val;

    // Implementation
    auto18566EEF_val = lp_showHide;
    if (auto18566EEF_val == true) {
        DialogSetVisible(libTIBW_gv_nODCommandPanelDialog, PlayerGroupSingle(lp_player), true);
    }
    else if (auto18566EEF_val == false) {
        DialogSetVisible(libTIBW_gv_nODCommandPanelDialog, PlayerGroupSingle(lp_player), false);
    }
    else {
    }
}

void libTIBW_gf_Showhidetoppanel (bool lp_showHide) {
    // Automatic Variable Declarations
    bool auto3C28B5E4_val;

    // Implementation
    auto3C28B5E4_val = lp_showHide;
    if (auto3C28B5E4_val == true) {
        DialogSetVisible(libTIBW_gv_mCVPanel, PlayerGroupAll(), true);
    }
    else if (auto3C28B5E4_val == false) {
        DialogSetVisible(libTIBW_gv_mCVPanel, PlayerGroupAll(), false);
    }
    else {
    }
}

void libTIBW_gf__NodDropPod (point lp_location, unitgroup lp_units, int lp_player) {
    // Variable Declarations
    unit lv_selectedUnit;
    unit lv_dropPod;
    point lv_dropPodLocationRoyalGuardExperienceGainingUnitGroupReturnedworkunitgroupPickedupweaponsetWeaponPickupUnitGroupStarChargeLevel;
    fixed lv_angleRoyalGuardExperienceGainingUnitGroupReturnedworkunitgroupPickedupweaponsetWeaponPickupUnitGroupStarChargeLevel;
    point lv_dropLocationRoyalGuardExperienceGainingUnitGroupReturnedworkunitgroupPickedupweaponsetWeaponPickupUnitGroupStarChargeLevel;
    unit lv_creep;

    // Automatic Variable Declarations
    unitgroup autoE3C154DA_g;
    int autoE3C154DA_u;
    unitgroup autoB2ED511A_g;
    int autoB2ED511A_u;

    // Variable Initialization

    // Implementation
    autoE3C154DA_g = lp_units;
    autoE3C154DA_u = UnitGroupCount(autoE3C154DA_g, c_unitCountAll);
    for (;; autoE3C154DA_u -= 1) {
        lv_selectedUnit = UnitGroupUnitFromEnd(autoE3C154DA_g, autoE3C154DA_u);
        if (lv_selectedUnit == null) { break; }
        libNtve_gf_ShowHideUnit(lv_selectedUnit, false);
        libNtve_gf_PauseUnit(lv_selectedUnit, true);
    }
    libNtve_gf_CreateUnitsAtPoint2(1, "DropPodNoddamage", 0, lp_player, lp_location);
    lv_dropPod = UnitLastCreated();
    lv_dropPodLocationRoyalGuardExperienceGainingUnitGroupReturnedworkunitgroupPickedupweaponsetWeaponPickupUnitGroupStarChargeLevel = UnitGetPosition(lv_dropPod);
    lv_angleRoyalGuardExperienceGainingUnitGroupReturnedworkunitgroupPickedupweaponsetWeaponPickupUnitGroupStarChargeLevel = 0.0;
    autoB2ED511A_g = lp_units;
    autoB2ED511A_u = UnitGroupCount(autoB2ED511A_g, c_unitCountAll);
    for (;; autoB2ED511A_u -= 1) {
        lv_selectedUnit = UnitGroupUnitFromEnd(autoB2ED511A_g, autoB2ED511A_u);
        if (lv_selectedUnit == null) { break; }
        UnitBehaviorAddPlayer(lv_selectedUnit, "NodGroundDrop", 1, 1);
        UnitSetPosition(lv_selectedUnit, lv_dropPodLocationRoyalGuardExperienceGainingUnitGroupReturnedworkunitgroupPickedupweaponsetWeaponPickupUnitGroupStarChargeLevel, false);
        libNtve_gf_ShowHideUnit(lv_selectedUnit, true);
        libNtve_gf_PauseUnit(lv_selectedUnit, false);
    }
    Wait(4.0, c_timeGame);
    UnitKill(lv_dropPod);
}

void libTIBW_gf__GDIDropPod (point lp_location, unitgroup lp_units, int lp_player) {
    // Variable Declarations
    unit lv_selectedUnit;
    unit lv_dropPod;
    point lv_dropPodLocationRoyalGuardExperienceGainingUnitGroupReturnedworkunitgroupPickedupweaponsetWeaponPickupUnitGroupStarChargeLevel;
    fixed lv_angle;
    fixed lv_angleStart;
    point lv_dropPoint;
    fixed lv_range;
    int lv_subgroupIndex;
    point lv_movePosition;
    int lv_countPerRow;

    // Automatic Variable Declarations
    unitgroup auto683F72BB_g;
    int auto683F72BB_u;
    unitgroup auto24E2264C_g;
    int auto24E2264C_u;

    // Variable Initialization

    // Implementation
    auto683F72BB_g = lp_units;
    auto683F72BB_u = UnitGroupCount(auto683F72BB_g, c_unitCountAll);
    for (;; auto683F72BB_u -= 1) {
        lv_selectedUnit = UnitGroupUnitFromEnd(auto683F72BB_g, auto683F72BB_u);
        if (lv_selectedUnit == null) { break; }
        libNtve_gf_ShowHideUnit(lv_selectedUnit, false);
        libNtve_gf_PauseUnit(lv_selectedUnit, true);
    }
    libNtve_gf_CreateUnitsAtPoint2(1, "DropPodGDI", 0, lp_player, lp_location);
    lv_dropPod = UnitLastCreated();
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lv_dropPod), c_animNameDefault, "Birth", c_animFlagNonLooping, c_animTimeDefault);
    Wait(3.5, c_timeGame);
    SoundPlayAtPoint(SoundLink("GDIDropPodImpact", -1), PlayerGroupAll(), lv_dropPoint, 0.0, 200.0, 0.0);
    lv_countPerRow = 4;
    if ((UnitGroupCount(lp_units, c_unitCountAlive) > 16)) {
        lv_countPerRow = ((UnitGroupCount(lp_units, c_unitCountAlive) + 3) / 4);
    }

    lv_dropPodLocationRoyalGuardExperienceGainingUnitGroupReturnedworkunitgroupPickedupweaponsetWeaponPickupUnitGroupStarChargeLevel = UnitGetPosition(lv_dropPod);
    lv_range = (0.8 + ((IntToFixed((UnitGroupCount(lp_units, c_unitCountAlive) + 3)) / IntToFixed(lv_countPerRow)) * 0.8));
    lv_subgroupIndex = 1;
    lv_angleStart = 225.0;
    lv_angle = lv_angleStart;
    auto24E2264C_g = lp_units;
    auto24E2264C_u = UnitGroupCount(auto24E2264C_g, c_unitCountAll);
    for (;; auto24E2264C_u -= 1) {
        lv_selectedUnit = UnitGroupUnitFromEnd(auto24E2264C_g, auto24E2264C_u);
        if (lv_selectedUnit == null) { break; }
        lv_dropPoint = PointWithOffsetPolar(lv_dropPodLocationRoyalGuardExperienceGainingUnitGroupReturnedworkunitgroupPickedupweaponsetWeaponPickupUnitGroupStarChargeLevel, 1.0, lv_angle);
        SoundPlayAtPoint(SoundLink("Medivac_Unload", 0), PlayerGroupAll(), lv_dropPoint, 0.0, 100.0, 0.0);
        Wait(0.125, c_timeGame);
        UnitSetPosition(lv_selectedUnit, lv_dropPoint, false);
        libNtve_gf_ShowHideUnit(lv_selectedUnit, true);
        libNtve_gf_PauseUnit(lv_selectedUnit, false);
        lv_movePosition = PointWithOffsetPolar(lv_dropPodLocationRoyalGuardExperienceGainingUnitGroupReturnedworkunitgroupPickedupweaponsetWeaponPickupUnitGroupStarChargeLevel, lv_range, lv_angle);
        if ((lv_subgroupIndex == lv_countPerRow)) {
            lv_subgroupIndex = 1;
            lv_angle = lv_angleStart;
            lv_range -= 0.8;
        }
        else {
            lv_subgroupIndex += 1;
            lv_angle += 10.0;
        }
    }
    UnitKill(lv_dropPod);
}

void libTIBW_gf_CreateDropPod (int lp_race, point lp_location, unitgroup lp_units, bool lp_waitDontWait, int lp_playerinteger) {
    // Variable Declarations
    point lv_dropPoint;
    unitgroup lv_dropUnitsRoyalGuardExperienceGainingUnitGroupReturnedworkunitgroupPickedupweaponsetWeaponPickupUnitGroupStarChargeLevel;
    int lv_localPlayerIntegerRoyalGuardExperienceGainingUnitGroupReturnedworkunitgroupPickedupweaponsetWeaponPickupUnitGroupStarChargeLevel;

    // Automatic Variable Declarations
    int auto10E1EA31_val;

    // Variable Initialization
    lv_dropUnitsRoyalGuardExperienceGainingUnitGroupReturnedworkunitgroupPickedupweaponsetWeaponPickupUnitGroupStarChargeLevel = UnitGroupEmpty();

    // Implementation
    lv_dropPoint = Point(PointGetX(lp_location), PointGetY(lp_location));
    lv_dropUnitsRoyalGuardExperienceGainingUnitGroupReturnedworkunitgroupPickedupweaponsetWeaponPickupUnitGroupStarChargeLevel = UnitGroupCopy(lp_units);
    lv_localPlayerIntegerRoyalGuardExperienceGainingUnitGroupReturnedworkunitgroupPickedupweaponsetWeaponPickupUnitGroupStarChargeLevel = lp_playerinteger;
    auto10E1EA31_val = lp_race;
    if (auto10E1EA31_val == libTIBW_ge_DropPodRace_Terran) {
        if ((lp_waitDontWait == true)) {
            libTIBW_gf__GDIDropPod(lv_dropPoint, lv_dropUnitsRoyalGuardExperienceGainingUnitGroupReturnedworkunitgroupPickedupweaponsetWeaponPickupUnitGroupStarChargeLevel, lp_playerinteger);
        }
        else {
            libTIBW_gv_cNC_TP_DropPod_LocationRoyalGuardExperienceGainingUnitGroupReturnedworkunitgroupPickedupweaponsetWeaponPickupUnitGroupStarChargeLevel = lv_dropPoint;
            libTIBW_gv_cNC_TP_DropPod_Units = lv_dropUnitsRoyalGuardExperienceGainingUnitGroupReturnedworkunitgroupPickedupweaponsetWeaponPickupUnitGroupStarChargeLevel;
            libTIBW_gv_playerIntegerRoyalGuardExperienceGainingUnitGroupReturnedworkunitgroupPickedupweaponsetWeaponPickupUnitGroupStarChargeLevel = lv_localPlayerIntegerRoyalGuardExperienceGainingUnitGroupReturnedworkunitgroupPickedupweaponsetWeaponPickupUnitGroupStarChargeLevel;
            TriggerExecute(libTIBW_gt__GDIDropPod, true, false);
        }
    }
    else if (auto10E1EA31_val == libTIBW_ge_DropPodRace_Zerg) {
        if ((lp_waitDontWait == true)) {
            libTIBW_gf__NodDropPod(lv_dropPoint, lv_dropUnitsRoyalGuardExperienceGainingUnitGroupReturnedworkunitgroupPickedupweaponsetWeaponPickupUnitGroupStarChargeLevel, lp_playerinteger);
        }
        else {
            libTIBW_gv_cNC_TP_DropPod_LocationRoyalGuardExperienceGainingUnitGroupReturnedworkunitgroupPickedupweaponsetWeaponPickupUnitGroupStarChargeLevel = lv_dropPoint;
            libTIBW_gv_cNC_TP_DropPod_Units = lv_dropUnitsRoyalGuardExperienceGainingUnitGroupReturnedworkunitgroupPickedupweaponsetWeaponPickupUnitGroupStarChargeLevel;
            libTIBW_gv_playerIntegerRoyalGuardExperienceGainingUnitGroupReturnedworkunitgroupPickedupweaponsetWeaponPickupUnitGroupStarChargeLevel = lv_localPlayerIntegerRoyalGuardExperienceGainingUnitGroupReturnedworkunitgroupPickedupweaponsetWeaponPickupUnitGroupStarChargeLevel;
            TriggerExecute(libTIBW_gt__NodDropPodStarchainTest, true, false);
        }
    }
    else {
    }
}

// Triggers
//--------------------------------------------------------------------------------------------------
// Trigger: Beam Reflector
//--------------------------------------------------------------------------------------------------
bool libTIBW_gt_BeamReflector_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_beam;
    unit lv_reflector;
    int lv_player;
    unit lv_venom;
    unit lv_target;
    unitgroup lv_venoms;
    unitgroup lv_venomsAll;
    unitgroup lv_path;
    point lv_targetPosition;
    point lv_reflectorPosition;

    // Automatic Variable Declarations
    unitgroup autoFBE23D82_g;
    int autoFBE23D82_u;
    unitgroup auto7447E9A4_g;
    int auto7447E9A4_u;
    int autoE21B474B_ae;
    int autoE21B474B_var;
    int auto8BEC13BF_ae;
    int auto8BEC13BF_var;

    // Variable Initialization
    lv_beam = EventUnit();
    lv_reflector = lv_beam;
    lv_player = EventPlayer();
    lv_target = EventUnitTargetUnit();
    lv_venoms = UnitGroupEmpty();
    lv_venomsAll = UnitGroupEmpty();
    lv_path = UnitGroupEmpty();
    lv_targetPosition = UnitGetPosition(lv_target);
    lv_reflectorPosition = UnitGetPosition(lv_beam);

    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoFBE23D82_g = UnitGroup("NodVenom", lv_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoFBE23D82_u = UnitGroupCount(autoFBE23D82_g, c_unitCountAll);
    for (;; autoFBE23D82_u -= 1) {
        lv_venom = UnitGroupUnitFromEnd(autoFBE23D82_g, autoFBE23D82_u);
        if (lv_venom == null) { break; }
        if ((UnitOrderCount(lv_venom) == 0)) {
            UnitGroupAdd(lv_venomsAll, lv_venom);
        }

    }
    while ((DistanceBetweenPoints(lv_targetPosition, lv_reflectorPosition) > 11.0)) {
        lv_venoms = UnitGroupEmpty();
        auto7447E9A4_g = lv_venomsAll;
        auto7447E9A4_u = UnitGroupCount(auto7447E9A4_g, c_unitCountAll);
        for (;; auto7447E9A4_u -= 1) {
            lv_venom = UnitGroupUnitFromEnd(auto7447E9A4_g, auto7447E9A4_u);
            if (lv_venom == null) { break; }
            if ((UnitOrderCount(lv_venom) == 0) && (DistanceBetweenPoints(lv_reflectorPosition, UnitGetPosition(lv_venom)) < 11.0)) {
                UnitGroupAdd(lv_venoms, lv_venom);
            }

        }
        if ((UnitGroupCount(lv_venoms, c_unitCountAlive) == 0)) {
            if ((UnitGroupCount(lv_path, c_unitCountAlive) > 1)) {
                UnitGroupRemove(lv_path, lv_reflector);
                lv_reflector = UnitGroupUnit(lv_path, UnitGroupCount(lv_path, c_unitCountAlive));
            }
            else {
                break;
            }
        }
        else {
            lv_reflector = UnitGroupClosestToPoint(lv_venoms, UnitGetPosition(lv_target));
            lv_reflectorPosition = UnitGetPosition(lv_reflector);
            UnitGroupAdd(lv_path, lv_reflector);
            UnitGroupRemove(lv_venomsAll, lv_reflector);
        }
    }
    TextExpressionSetToken("Param/Expression/lib_TIBW_D68B19F9", "A", IntToText(UnitGroupCount(lv_path, c_unitCountAlive)));
    TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_TIBW_D68B19F9"), true);
    if ((UnitGroupCount(lv_path, c_unitCountAlive) > 0)) {
        UnitIssueOrder(lv_beam, OrderTargetingUnit(AbilityCommand("BeamCannonVenomCharge", 0), UnitGroupUnit(lv_path, 1)), c_orderQueueAddToFront);
        autoE21B474B_ae = UnitGroupCount(lv_path, c_unitCountAlive);
        autoE21B474B_var = 1;
        for ( ; autoE21B474B_var <= autoE21B474B_ae; autoE21B474B_var += 1 ) {
            UnitBehaviorAdd(UnitGroupUnit(lv_path, autoE21B474B_var), "BeamCannonVenomCharged", lv_beam, 1);
            UnitBehaviorAdd(UnitGroupUnit(lv_path, autoE21B474B_var), "BeamCannonReflectorActive", lv_beam, 1);
        }
        auto8BEC13BF_ae = (UnitGroupCount(lv_path, c_unitCountAlive) - 1);
        auto8BEC13BF_var = 1;
        for ( ; auto8BEC13BF_var <= auto8BEC13BF_ae; auto8BEC13BF_var += 1 ) {
            UnitIssueOrder(UnitGroupUnit(lv_path, auto8BEC13BF_var), OrderTargetingUnit(AbilityCommand("VenomBeamRetargetCharge", 0), UnitGroupUnit(lv_path, (auto8BEC13BF_var + 1))), c_orderQueueAddToFront);
        }
        Wait(0.15, c_timeGame);
        UnitIssueOrder(UnitGroupUnit(lv_path, UnitGroupCount(lv_path, c_unitCountAlive)), OrderTargetingUnit(AbilityCommand("BeamCannonDistantAttackFinal", 0), lv_target), c_orderQueueAddToFront);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libTIBW_gt_BeamReflector_Init () {
    libTIBW_gt_BeamReflector = TriggerCreate("libTIBW_gt_BeamReflector_Func");
    TriggerAddEventUnitAbility(libTIBW_gt_BeamReflector, null, AbilityCommand("BeamCannonDistantAttack", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Untitled Trigger 001
//--------------------------------------------------------------------------------------------------
bool libTIBW_gt_UntitledTrigger001_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorRemove(EventUnit(), "BeamCannonReflectorActive", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libTIBW_gt_UntitledTrigger001_Init () {
    libTIBW_gt_UntitledTrigger001 = TriggerCreate("libTIBW_gt_UntitledTrigger001_Func");
    TriggerAddEventUnitAbility(libTIBW_gt_UntitledTrigger001, null, AbilityCommand("VenomBeamRetargetCharge", 0), c_unitAbilStageCancel, false);
    TriggerAddEventUnitAbility(libTIBW_gt_UntitledTrigger001, null, AbilityCommand("VenomBeamRetargetCharge", 0), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(libTIBW_gt_UntitledTrigger001, null, AbilityCommand("BeamCannonDistantAttackFinal", 0), c_unitAbilStageCancel, false);
    TriggerAddEventUnitAbility(libTIBW_gt_UntitledTrigger001, null, AbilityCommand("BeamCannonDistantAttackFinal", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MoveCommandOverrideExecute
//--------------------------------------------------------------------------------------------------
bool libTIBW_gt_MoveCommandOverrideExecute_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;
    unit lv_target;

    // Automatic Variable Declarations
    string autoAD11D6DA_val;

    // Variable Initialization
    lv_unit = EventUnit();
    lv_target = EventUnitTargetUnit();

    // Actions
    if (!runActions) {
        return true;
    }

    autoAD11D6DA_val = UnitGetType(lv_target);
    if (autoAD11D6DA_val == "NodAvatarWreckage") {
        if ((ValidatorExecute("IsPilot", lv_unit, lv_unit) == 0)) {
            UnitBehaviorAdd(lv_unit, "NodAvatarPilot", lv_unit, 1);
        }

    }
    else if (autoAD11D6DA_val == "NodRedeemer") {
        if ((ValidatorExecute("SourceIsValidRedeemerPilot", lv_unit, lv_unit) == 0)) {
            UnitBehaviorAdd(lv_unit, "NodRedeemerPilot", lv_unit, 1);
        }

    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libTIBW_gt_MoveCommandOverrideExecute_Init () {
    libTIBW_gt_MoveCommandOverrideExecute = TriggerCreate("libTIBW_gt_MoveCommandOverrideExecute_Func");
    TriggerAddEventUnitAbility(libTIBW_gt_MoveCommandOverrideExecute, null, AbilityCommand("move", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MoveCommandOverrideCancel
//--------------------------------------------------------------------------------------------------
bool libTIBW_gt_MoveCommandOverrideCancel_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;
    unit lv_target;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_unit = EventUnit();
    lv_target = EventUnitTargetUnit();

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitHasBehavior2(lv_unit, "NodAvatarPilot") == true)) {
        UnitBehaviorRemove(lv_unit, "NodAvatarPilot", 1);
    }

    if ((UnitHasBehavior2(lv_unit, "NodRedeemerPilot") == true)) {
        UnitBehaviorRemove(lv_unit, "NodRedeemerPilot", 1);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libTIBW_gt_MoveCommandOverrideCancel_Init () {
    libTIBW_gt_MoveCommandOverrideCancel = TriggerCreate("libTIBW_gt_MoveCommandOverrideCancel_Func");
    TriggerAddEventUnitAbility(libTIBW_gt_MoveCommandOverrideCancel, null, AbilityCommand("move", 0), c_unitAbilStageCancel, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MoveCommandOverrideComplete
//--------------------------------------------------------------------------------------------------
bool libTIBW_gt_MoveCommandOverrideComplete_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;
    unit lv_target;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_unit = EventUnit();
    lv_target = EventUnitTargetUnit();

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitHasBehavior2(lv_unit, "NodAvatarPilot") == true)) {
        UnitBehaviorRemove(lv_unit, "NodAvatarPilot", 1);
    }

    if ((UnitHasBehavior2(lv_unit, "NodRedeemerPilot") == true)) {
        UnitBehaviorRemove(lv_unit, "NodRedeemerPilot", 1);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libTIBW_gt_MoveCommandOverrideComplete_Init () {
    libTIBW_gt_MoveCommandOverrideComplete = TriggerCreate("libTIBW_gt_MoveCommandOverrideComplete_Func");
    TriggerAddEventUnitAbility(libTIBW_gt_MoveCommandOverrideComplete, null, AbilityCommand("move", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Test
//--------------------------------------------------------------------------------------------------
bool libTIBW_gt_Test_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    PlayerOptionOverride(1, "simplecommandcard", "0");
    PlayerSetRace(1, "Nod");
    GameSetSpeedValue(c_gameSpeedFaster);
    TriggerExecute(libTIBW_gt_PlayNod, true, false);
    libSPPN_gf_RunTester();
    TriggerExecute(libScio_gt_GenetronInit, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libTIBW_gt_Test_Init () {
    libTIBW_gt_Test = TriggerCreate("libTIBW_gt_Test_Func");
    TriggerAddEventMapInit(libTIBW_gt_Test);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Play Nod
//--------------------------------------------------------------------------------------------------
bool libTIBW_gt_PlayNod_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup autoC0198CC5_g;
    int autoC0198CC5_var;
    playergroup autoB12AAF8F_g;
    int autoB12AAF8F_var;

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(libD4966BDA_gt_InitBeaconsButton, true, false);
    autoC0198CC5_g = PlayerGroupAll();
    autoC0198CC5_var = -1;
    while (true) {
        autoC0198CC5_var = PlayerGroupNextPlayer(autoC0198CC5_g, autoC0198CC5_var);
        if (autoC0198CC5_var < 0) { break; }
        if ((PlayerRace(autoC0198CC5_var) == "Nod")) {
            UISetFrameVisible(PlayerGroupSingle(autoC0198CC5_var), c_syncFrameTypeConsolePanel, false);
            DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/ConsoleUIContainer");
            DialogControlSendAnimationEvent(DialogControlLastCreated(), PlayerGroupSingle(autoC0198CC5_var), "SlimUI_On");
        }

    }
    TriggerEnable(libTIBW_gt_Borrowedbombercustomreturntrajectory, true);
    TriggerEnable(libTIBW_gt_BorrowedbombercreationbindingStarchainTest, true);
    TriggerEnable(libTIBW_gt_LaunchairstrikeStarchainTest, true);
    Wait(1.0, c_timeGame);
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/ConsoleUIContainer");
    autoB12AAF8F_g = PlayerGroupAll();
    autoB12AAF8F_var = -1;
    while (true) {
        autoB12AAF8F_var = PlayerGroupNextPlayer(autoB12AAF8F_g, autoB12AAF8F_var);
        if (autoB12AAF8F_var < 0) { break; }
        if ((PlayerRace(autoB12AAF8F_var) == "Nod")) {
            DialogControlSendAnimationEvent(DialogControlLastCreated(), PlayerGroupSingle(autoB12AAF8F_var), "SlimUI_On");
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libTIBW_gt_PlayNod_Init () {
    libTIBW_gt_PlayNod = TriggerCreate("libTIBW_gt_PlayNod_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Borrowed bomber custom return trajectory
//--------------------------------------------------------------------------------------------------
bool libTIBW_gt_Borrowedbombercustomreturntrajectory_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_defaultIntRoyalGuardExperienceGainingUnitGroupReturnedworkunitgroupPickedupweaponsetWeaponPickupUnitGroupStarChargeLevel;
    int lv_diyInit;
    unit lv_airPlane;
    point lv_airStrikePoint;
    fixed lv_airStrikeAngle;
    int lv_porNNumber;
    int lv_times;
    int lv_negativeRandom;
    fixed lv_unitSpeed;
    fixed lv_temp;

    // Automatic Variable Declarations
    int auto97AF4E93_ae;
    const int auto97AF4E93_ai = 1;

    // Variable Initialization
    lv_diyInit = 1;
    lv_airPlane = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_airStrikePoint = EventPlayerEffectUsedPoint(c_effectLocationTargetPoint);
    lv_airStrikeAngle = UnitGetFacing(lv_airPlane);
    lv_porNNumber = 1;
    lv_temp = 0.75;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_unitSpeed = UnitGetPropertyFixed(lv_airPlane, c_unitPropMovementSpeed, c_unitPropCurrent);
    lv_negativeRandom = RandomInt(0, 1);
    if ((lv_negativeRandom == 1)) {
        lv_porNNumber = -1;
    }

    while ((lv_times <= 2)) {
        if ((lv_times == 0)) {
            UnitIssueOrder(lv_airPlane, OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(UnitGetPosition(lv_airPlane), (lv_diyInit * (lv_temp * lv_unitSpeed)), lv_airStrikeAngle)), c_orderQueueReplace);
            lv_airStrikeAngle += (lv_porNNumber * 112.5);
        }
        else {
            UnitIssueOrder(lv_airPlane, OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(UnitGetPosition(lv_airPlane), ((0.76 * lv_diyInit) * (lv_temp * lv_unitSpeed)), lv_airStrikeAngle)), c_orderQueueReplace);
            lv_airStrikeAngle += (lv_porNNumber * 45.0);
        }
        Wait((lv_temp * lv_diyInit), c_timeGame);
        lv_times += 1;
    }
    auto97AF4E93_ae = (libTIBW_gv_platformMaxCountRoyalGuardExperienceGainingUnitGroupReturnedworkunitgroupPickedupweaponsetWeaponPickupUnitGroupStarChargeLevel - 1);
    lv_defaultIntRoyalGuardExperienceGainingUnitGroupReturnedworkunitgroupPickedupweaponsetWeaponPickupUnitGroupStarChargeLevel = 0;
    for ( ; ( (auto97AF4E93_ai >= 0 && lv_defaultIntRoyalGuardExperienceGainingUnitGroupReturnedworkunitgroupPickedupweaponsetWeaponPickupUnitGroupStarChargeLevel <= auto97AF4E93_ae) || (auto97AF4E93_ai < 0 && lv_defaultIntRoyalGuardExperienceGainingUnitGroupReturnedworkunitgroupPickedupweaponsetWeaponPickupUnitGroupStarChargeLevel >= auto97AF4E93_ae) ) ; lv_defaultIntRoyalGuardExperienceGainingUnitGroupReturnedworkunitgroupPickedupweaponsetWeaponPickupUnitGroupStarChargeLevel += auto97AF4E93_ai ) {
        if ((UnitGroupHasUnit(libTIBW_gv_bomberPFUnitsGroupRoyalGuardExperienceGainingUnitGroupReturnedworkunitgroupPickedupweaponsetWeaponPickupUnitGroupStarChargeLevel[lv_defaultIntRoyalGuardExperienceGainingUnitGroupReturnedworkunitgroupPickedupweaponsetWeaponPickupUnitGroupStarChargeLevel], lv_airPlane) == true)) {
            UnitIssueOrder(lv_airPlane, OrderTargetingPoint(AbilityCommand("VertigoLand", 0), UnitGetPosition(UnitGroupUnit(libTIBW_gv_bomberPFUnitsGroupRoyalGuardExperienceGainingUnitGroupReturnedworkunitgroupPickedupweaponsetWeaponPickupUnitGroupStarChargeLevel[lv_defaultIntRoyalGuardExperienceGainingUnitGroupReturnedworkunitgroupPickedupweaponsetWeaponPickupUnitGroupStarChargeLevel], 1))), c_orderQueueReplace);
            break;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libTIBW_gt_Borrowedbombercustomreturntrajectory_Init () {
    libTIBW_gt_Borrowedbombercustomreturntrajectory = TriggerCreate("libTIBW_gt_Borrowedbombercustomreturntrajectory_Func");
    TriggerEnable(libTIBW_gt_Borrowedbombercustomreturntrajectory, false);
    TriggerAddEventPlayerEffectUsed(libTIBW_gt_Borrowedbombercustomreturntrajectory, c_playerAny, "VertigoSearchArea");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Borrowed bomber creation bindingStarchain Test
//--------------------------------------------------------------------------------------------------
bool libTIBW_gt_BorrowedbombercreationbindingStarchainTest_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_bomber;
    unit lv_platformRoyalGuardExperienceGainingUnitGroupReturnedworkunitgroupPickedupweaponsetWeaponPickupUnitGroupStarChargeLevel;
    int lv_defaultIntRoyalGuardExperienceGainingUnitGroupReturnedworkunitgroupPickedupweaponsetWeaponPickupUnitGroupStarChargeLevel;

    // Automatic Variable Declarations
    int autoA5C0725A_ae;
    const int autoA5C0725A_ai = 1;

    // Variable Initialization
    lv_bomber = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    lv_platformRoyalGuardExperienceGainingUnitGroupReturnedworkunitgroupPickedupweaponsetWeaponPickupUnitGroupStarChargeLevel = EventPlayerEffectUsedUnit(c_effectUnitCaster);

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupAdd(libTIBW_gv_bomberFighterTempGroup, lv_bomber);
    if ((UnitGroupHasUnit(libTIBW_gv_bomberPlatformTempGroup, lv_platformRoyalGuardExperienceGainingUnitGroupReturnedworkunitgroupPickedupweaponsetWeaponPickupUnitGroupStarChargeLevel) == false)) {
        UnitGroupAdd(libTIBW_gv_bomberPlatformTempGroup, lv_platformRoyalGuardExperienceGainingUnitGroupReturnedworkunitgroupPickedupweaponsetWeaponPickupUnitGroupStarChargeLevel);
        UnitGroupAdd(libTIBW_gv_bomberPFUnitsGroupRoyalGuardExperienceGainingUnitGroupReturnedworkunitgroupPickedupweaponsetWeaponPickupUnitGroupStarChargeLevel[libTIBW_gv_platformNowCountRoyalGuardExperienceGainingUnitGroupReturnedworkunitgroupPickedupweaponsetWeaponPickupUnitGroupStarChargeLevel], lv_platformRoyalGuardExperienceGainingUnitGroupReturnedworkunitgroupPickedupweaponsetWeaponPickupUnitGroupStarChargeLevel);
        UnitGroupAdd(libTIBW_gv_bomberPFUnitsGroupRoyalGuardExperienceGainingUnitGroupReturnedworkunitgroupPickedupweaponsetWeaponPickupUnitGroupStarChargeLevel[libTIBW_gv_platformNowCountRoyalGuardExperienceGainingUnitGroupReturnedworkunitgroupPickedupweaponsetWeaponPickupUnitGroupStarChargeLevel], lv_bomber);
        libTIBW_gv_platformNowCountRoyalGuardExperienceGainingUnitGroupReturnedworkunitgroupPickedupweaponsetWeaponPickupUnitGroupStarChargeLevel += 1;
    }
    else {
        autoA5C0725A_ae = (libTIBW_gv_platformMaxCountRoyalGuardExperienceGainingUnitGroupReturnedworkunitgroupPickedupweaponsetWeaponPickupUnitGroupStarChargeLevel - 1);
        lv_defaultIntRoyalGuardExperienceGainingUnitGroupReturnedworkunitgroupPickedupweaponsetWeaponPickupUnitGroupStarChargeLevel = 0;
        for ( ; ( (autoA5C0725A_ai >= 0 && lv_defaultIntRoyalGuardExperienceGainingUnitGroupReturnedworkunitgroupPickedupweaponsetWeaponPickupUnitGroupStarChargeLevel <= autoA5C0725A_ae) || (autoA5C0725A_ai < 0 && lv_defaultIntRoyalGuardExperienceGainingUnitGroupReturnedworkunitgroupPickedupweaponsetWeaponPickupUnitGroupStarChargeLevel >= autoA5C0725A_ae) ) ; lv_defaultIntRoyalGuardExperienceGainingUnitGroupReturnedworkunitgroupPickedupweaponsetWeaponPickupUnitGroupStarChargeLevel += autoA5C0725A_ai ) {
            if ((UnitGroupHasUnit(libTIBW_gv_bomberPFUnitsGroupRoyalGuardExperienceGainingUnitGroupReturnedworkunitgroupPickedupweaponsetWeaponPickupUnitGroupStarChargeLevel[lv_defaultIntRoyalGuardExperienceGainingUnitGroupReturnedworkunitgroupPickedupweaponsetWeaponPickupUnitGroupStarChargeLevel], lv_platformRoyalGuardExperienceGainingUnitGroupReturnedworkunitgroupPickedupweaponsetWeaponPickupUnitGroupStarChargeLevel) == true)) {
                UnitGroupClear(libTIBW_gv_bomberPFUnitsGroupRoyalGuardExperienceGainingUnitGroupReturnedworkunitgroupPickedupweaponsetWeaponPickupUnitGroupStarChargeLevel[lv_defaultIntRoyalGuardExperienceGainingUnitGroupReturnedworkunitgroupPickedupweaponsetWeaponPickupUnitGroupStarChargeLevel]);
                UnitGroupAdd(libTIBW_gv_bomberPFUnitsGroupRoyalGuardExperienceGainingUnitGroupReturnedworkunitgroupPickedupweaponsetWeaponPickupUnitGroupStarChargeLevel[lv_defaultIntRoyalGuardExperienceGainingUnitGroupReturnedworkunitgroupPickedupweaponsetWeaponPickupUnitGroupStarChargeLevel], lv_platformRoyalGuardExperienceGainingUnitGroupReturnedworkunitgroupPickedupweaponsetWeaponPickupUnitGroupStarChargeLevel);
                UnitGroupAdd(libTIBW_gv_bomberPFUnitsGroupRoyalGuardExperienceGainingUnitGroupReturnedworkunitgroupPickedupweaponsetWeaponPickupUnitGroupStarChargeLevel[lv_defaultIntRoyalGuardExperienceGainingUnitGroupReturnedworkunitgroupPickedupweaponsetWeaponPickupUnitGroupStarChargeLevel], lv_bomber);
                break;
            }

        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libTIBW_gt_BorrowedbombercreationbindingStarchainTest_Init () {
    libTIBW_gt_BorrowedbombercreationbindingStarchainTest = TriggerCreate("libTIBW_gt_BorrowedbombercreationbindingStarchainTest_Func");
    TriggerEnable(libTIBW_gt_BorrowedbombercreationbindingStarchainTest, false);
    TriggerAddEventPlayerEffectUsed(libTIBW_gt_BorrowedbombercreationbindingStarchainTest, c_playerAny, "VertigoCreate");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Launch airstrikeStarchain Test
//--------------------------------------------------------------------------------------------------
bool libTIBW_gt_LaunchairstrikeStarchainTest_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_range;
    region lv_areaRoyalGuardExperienceGainingUnitGroupReturnedworkunitgroupPickedupweaponsetWeaponPickupUnitGroupStarChargeLevel;
    int lv_defaultIntRoyalGuardExperienceGainingUnitGroupReturnedworkunitgroupPickedupweaponsetWeaponPickupUnitGroupStarChargeLevel;

    // Automatic Variable Declarations
    unitgroup autoBA573FEE_g;
    int autoBA573FEE_u;
    unit autoBA573FEE_var;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_range = 8.0;
    lv_areaRoyalGuardExperienceGainingUnitGroupReturnedworkunitgroupPickedupweaponsetWeaponPickupUnitGroupStarChargeLevel = RegionCircle(EventPlayerEffectUsedPoint(c_effectLocationTargetPoint), lv_range);
    libTIBW_gv_aOEStrikeCasterTemp = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    SoundPlayForPlayer(SoundLink("Vertigo_Attack", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    autoBA573FEE_g = libTIBW_gv_bomberFighterTempGroup;
    autoBA573FEE_u = UnitGroupCount(autoBA573FEE_g, c_unitCountAll);
    for (;; autoBA573FEE_u -= 1) {
        autoBA573FEE_var = UnitGroupUnitFromEnd(autoBA573FEE_g, autoBA573FEE_u);
        if (autoBA573FEE_var == null) { break; }
        if ((UnitGetType(autoBA573FEE_var) == "CabalVertigoLanded") && (UnitGetOwner(autoBA573FEE_var) == EventPlayer())) {
            UnitIssueOrder(autoBA573FEE_var, Order(AbilityCommand("Vertigotakeoff", 0)), c_orderQueueReplace);
            libTIBW_gv_bomberUsable -= 1;
            Wait(0.125, c_timeGame);
            libTIBW_gf_NodAirRaid(autoBA573FEE_var, lv_areaRoyalGuardExperienceGainingUnitGroupReturnedworkunitgroupPickedupweaponsetWeaponPickupUnitGroupStarChargeLevel);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libTIBW_gt_LaunchairstrikeStarchainTest_Init () {
    libTIBW_gt_LaunchairstrikeStarchainTest = TriggerCreate("libTIBW_gt_LaunchairstrikeStarchainTest_Func");
    TriggerEnable(libTIBW_gt_LaunchairstrikeStarchainTest, false);
    TriggerAddEventPlayerEffectUsed(libTIBW_gt_LaunchairstrikeStarchainTest, c_playerAny, "VertigoAttackSet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Nod Top PanelStarchain Test
//--------------------------------------------------------------------------------------------------
bool libTIBW_gt_NodTopPanelStarchainTest_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "NodCaster", c_unitCreateIgnorePlacement, 1, Point(3.0, 3.0));
    libTIBW_gv_nODCaster = UnitLastCreated();
    DialogCreate((76 * 2), (76 * 9), c_anchorRight, 0, -100, true);
    DialogSetImageVisible(DialogLastCreated(), false);
    libTIBW_gv_nODCommandPanelDialog = DialogLastCreated();
    DialogControlCreateFromTemplate(libTIBW_gv_nODCommandPanelDialog, c_triggerControlTypeCommandPanel, "NodTopPanel/SoACommandPanelTemplateNOD");
    libTIBW_gv_nODCommandPanl = DialogControlLastCreated();
    libNtve_gf_SetDialogItemUnitGroup(DialogControlLastCreated(), libNtve_gf_ConvertUnitToUnitGroup(libTIBW_gv_nODCaster), PlayerGroupAll());
    DialogSetVisible(libTIBW_gv_nODCommandPanelDialog, PlayerGroupAll(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libTIBW_gt_NodTopPanelStarchainTest_Init () {
    libTIBW_gt_NodTopPanelStarchainTest = TriggerCreate("libTIBW_gt_NodTopPanelStarchainTest_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: MCV Deploy PanelStarchain Test
//--------------------------------------------------------------------------------------------------
bool libTIBW_gt_MCVDeployPanelStarchainTest_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "MCVDeployCaster", c_unitCreateIgnorePlacement, 1, Point(3.0, 3.0));
    libTIBW_gv_mCVCasterRoyalGuardExperienceGainingUnitGroupReturnedworkunitgroupPickedupweaponsetWeaponPickupUnitGroupStarChargeLevel = UnitLastCreated();
    DialogCreate(900, 400, c_anchorTop, 0, 0, true);
    libTIBW_gv_mCVPanel = DialogLastCreated();
    DialogControlCreateFromTemplate(libTIBW_gv_mCVPanel, c_triggerControlTypeCommandPanel, "DeployMCVPanel/MCVDeployPanelTemplate");
    libTIBW_gv_mCVDeploymentPanelRoyalGuardExperienceGainingUnitGroupReturnedworkunitgroupPickedupweaponsetWeaponPickupUnitGroupStarChargeLevel = DialogControlLastCreated();
    DialogControlSetPosition(libTIBW_gv_mCVDeploymentPanelRoyalGuardExperienceGainingUnitGroupReturnedworkunitgroupPickedupweaponsetWeaponPickupUnitGroupStarChargeLevel, PlayerGroupAll(), c_anchorTop, -70, 30);
    libNtve_gf_SetDialogItemUnitGroup(DialogControlLastCreated(), libNtve_gf_ConvertUnitToUnitGroup(libTIBW_gv_mCVCasterRoyalGuardExperienceGainingUnitGroupReturnedworkunitgroupPickedupweaponsetWeaponPickupUnitGroupStarChargeLevel), PlayerGroupAll());
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 300, 50, c_anchorBottom, 30, 30, StringExternal("Param/Value/lib_TIBW_991E0E3C"), ColorWithAlpha(0,0,0,0), true, 2.0);
    DialogSetVisible(libTIBW_gv_mCVPanel, PlayerGroupAll(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libTIBW_gt_MCVDeployPanelStarchainTest_Init () {
    libTIBW_gt_MCVDeployPanelStarchainTest = TriggerCreate("libTIBW_gt_MCVDeployPanelStarchainTest_Func");
    TriggerEnable(libTIBW_gt_MCVDeployPanelStarchainTest, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Deployment detectionStarchain Test
//--------------------------------------------------------------------------------------------------
bool libTIBW_gt_DeploymentdetectionStarchainTest_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "MCVDeployCaster"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogSetVisible(libTIBW_gv_mCVPanel, PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libTIBW_gt_DeploymentdetectionStarchainTest_Init () {
    libTIBW_gt_DeploymentdetectionStarchainTest = TriggerCreate("libTIBW_gt_DeploymentdetectionStarchainTest_Func");
    TriggerEnable(libTIBW_gt_DeploymentdetectionStarchainTest, false);
    TriggerAddEventUnitAbility(libTIBW_gt_DeploymentdetectionStarchainTest, null, null, c_unitAbilStageAll, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Disable other MCVsStarchain Test
//--------------------------------------------------------------------------------------------------
bool libTIBW_gt_DisableotherMCVsStarchainTest_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetType(EventUnit()) == "CabalOffenseCrawler")) {
        TechTreeAbilityAllow(1, AbilityCommand("DeployMCVDefense", 0), false);
        TechTreeAbilityAllow(1, AbilityCommand("DeployMCVSupport", 0), false);
    }

    if ((UnitGetType(EventUnit()) == "CabalDefenseCrawler")) {
        TechTreeAbilityAllow(1, AbilityCommand("DeployMCVOffense", 0), false);
        TechTreeAbilityAllow(1, AbilityCommand("DeployMCVSupport", 0), false);
    }

    if ((UnitGetType(EventUnit()) == "CabalSupportCrawler")) {
        TechTreeAbilityAllow(1, AbilityCommand("DeployMCVDefense", 0), false);
        TechTreeAbilityAllow(1, AbilityCommand("DeployMCVOffense", 0), false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libTIBW_gt_DisableotherMCVsStarchainTest_Init () {
    libTIBW_gt_DisableotherMCVsStarchainTest = TriggerCreate("libTIBW_gt_DisableotherMCVsStarchainTest_Func");
    TriggerEnable(libTIBW_gt_DisableotherMCVsStarchainTest, false);
    TriggerAddEventUnitRegion(libTIBW_gt_DisableotherMCVsStarchainTest, null, RegionEntireMap(), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MCV redeployStarchain Test
//--------------------------------------------------------------------------------------------------
bool libTIBW_gt_MCVredeployStarchainTest_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetType(EventUnit()) == "CabalOffenseCrawler")) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_TIBW_C33C01A4"));
        Wait(0.5, c_timeGame);
        DialogSetVisible(libTIBW_gv_mCVPanel, PlayerGroupAll(), true);
    }

    if ((UnitGetType(EventUnit()) == "CabalDefenseCrawler")) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_TIBW_06F7264C"));
        Wait(0.5, c_timeGame);
        DialogSetVisible(libTIBW_gv_mCVPanel, PlayerGroupAll(), true);
    }

    if ((UnitGetType(EventUnit()) == "CabalSupportCrawler")) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_TIBW_75FED3F4"));
        Wait(0.5, c_timeGame);
        DialogSetVisible(libTIBW_gv_mCVPanel, PlayerGroupAll(), true);
    }

    if ((UnitGetType(EventUnit()) == "CabalDefenseCrawlerDeployed")) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_TIBW_4337F561"));
        Wait(0.5, c_timeGame);
        DialogSetVisible(libTIBW_gv_mCVPanel, PlayerGroupAll(), true);
    }

    if ((UnitGetType(EventUnit()) == "CabalOffenseCrawlerDeployed")) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_TIBW_B653B3CD"));
        Wait(0.5, c_timeGame);
        DialogSetVisible(libTIBW_gv_mCVPanel, PlayerGroupAll(), true);
    }

    if ((UnitGetType(EventUnit()) == "CabalSupportCrawlerDeployed")) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_TIBW_1A61AA67"));
        Wait(0.5, c_timeGame);
        DialogSetVisible(libTIBW_gv_mCVPanel, PlayerGroupAll(), true);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libTIBW_gt_MCVredeployStarchainTest_Init () {
    libTIBW_gt_MCVredeployStarchainTest = TriggerCreate("libTIBW_gt_MCVredeployStarchainTest_Func");
    TriggerEnable(libTIBW_gt_MCVredeployStarchainTest, false);
    TriggerAddEventUnitDied(libTIBW_gt_MCVredeployStarchainTest, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: _Nod Drop PodStarchain Test
//--------------------------------------------------------------------------------------------------
bool libTIBW_gt__NodDropPodStarchainTest_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libTIBW_gf__NodDropPod(libTIBW_gv_cNC_TP_DropPod_LocationRoyalGuardExperienceGainingUnitGroupReturnedworkunitgroupPickedupweaponsetWeaponPickupUnitGroupStarChargeLevel, libTIBW_gv_cNC_TP_DropPod_Units, libTIBW_gv_playerIntegerRoyalGuardExperienceGainingUnitGroupReturnedworkunitgroupPickedupweaponsetWeaponPickupUnitGroupStarChargeLevel);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libTIBW_gt__NodDropPodStarchainTest_Init () {
    libTIBW_gt__NodDropPodStarchainTest = TriggerCreate("libTIBW_gt__NodDropPodStarchainTest_Func");
    TriggerEnable(libTIBW_gt__NodDropPodStarchainTest, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: _GDI Drop Pod
//--------------------------------------------------------------------------------------------------
bool libTIBW_gt__GDIDropPod_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libTIBW_gf__GDIDropPod(libTIBW_gv_cNC_TP_DropPod_LocationRoyalGuardExperienceGainingUnitGroupReturnedworkunitgroupPickedupweaponsetWeaponPickupUnitGroupStarChargeLevel, libTIBW_gv_cNC_TP_DropPod_Units, libTIBW_gv_playerIntegerRoyalGuardExperienceGainingUnitGroupReturnedworkunitgroupPickedupweaponsetWeaponPickupUnitGroupStarChargeLevel);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libTIBW_gt__GDIDropPod_Init () {
    libTIBW_gt__GDIDropPod = TriggerCreate("libTIBW_gt__GDIDropPod_Func");
    TriggerEnable(libTIBW_gt__GDIDropPod, false);
}

void libTIBW_InitTriggers () {
    libTIBW_gt_BeamReflector_Init();
    libTIBW_gt_UntitledTrigger001_Init();
    libTIBW_gt_MoveCommandOverrideExecute_Init();
    libTIBW_gt_MoveCommandOverrideCancel_Init();
    libTIBW_gt_MoveCommandOverrideComplete_Init();
    libTIBW_gt_Test_Init();
    libTIBW_gt_PlayNod_Init();
    libTIBW_gt_Borrowedbombercustomreturntrajectory_Init();
    libTIBW_gt_BorrowedbombercreationbindingStarchainTest_Init();
    libTIBW_gt_LaunchairstrikeStarchainTest_Init();
    libTIBW_gt_NodTopPanelStarchainTest_Init();
    libTIBW_gt_MCVDeployPanelStarchainTest_Init();
    libTIBW_gt_DeploymentdetectionStarchainTest_Init();
    libTIBW_gt_DisableotherMCVsStarchainTest_Init();
    libTIBW_gt_MCVredeployStarchainTest_Init();
    libTIBW_gt__NodDropPodStarchainTest_Init();
    libTIBW_gt__GDIDropPod_Init();
}

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
bool libTIBW_InitLib_completed = false;

void libTIBW_InitLib () {
    if (libTIBW_InitLib_completed) {
        return;
    }

    libTIBW_InitLib_completed = true;

    libTIBW_InitLibraries();
    libTIBW_InitVariables();
    libTIBW_InitTriggers();
}

include "LibD4966BDA"
include "LibSPPN"

