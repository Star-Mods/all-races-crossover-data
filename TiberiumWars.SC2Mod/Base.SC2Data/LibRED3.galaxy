include "TriggerLibs/NativeLib"

include "LibRED3_h"

//--------------------------------------------------------------------------------------------------
// Library: Red Alert 3
//--------------------------------------------------------------------------------------------------
// External Library Initialization
void libRED3_InitLibraries () {
    libNtve_InitVariables();
}

// Variable Initialization
bool libRED3_InitVariables_completed = false;

void libRED3_InitVariables () {
    if (libRED3_InitVariables_completed) {
        return;
    }

    libRED3_InitVariables_completed = true;

    libRED3_gv_chaowuPanel = c_invalidDialogId;
    libRED3_gv_maintenancePanel = c_invalidDialogId;
    libRED3_gv_chaowucommandpanel = c_invalidDialogId;
    libRED3_gv_maintenancecommandpanel = c_invalidDialogId;
    libRED3_gv_teleportationmarktarget = UnitGroupEmpty();
    libRED3_gv_airportcustomvalue = 42;
    libRED3_gv_aircraftcustomvalue = 41;
}

// Functions
point libRED3_gf_Circledunitsturntoacquisitionpointrecent (unit lp_attackingunit, point lp_locationoftheattackedunit, bool lp_whetherthetargetpointistotheleftoftheunit) {
    // Variable Declarations
    point[37] lv_circlepoint;
    int lv_a;
    int lv_b;
    fixed lv_distance;
    point lv_closestpoint;
    fixed lv_anglefromcentertonearestpoint;
    fixed lv_theproperangle;
    point lv_finalpoint;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_distance = 200.0;

    // Implementation
    lv_anglefromcentertonearestpoint = AngleBetweenPoints(lp_locationoftheattackedunit, UnitGetPosition(lp_attackingunit));
    if (((TechTreeUnitCount(1, "Nexus", c_techCountCompleteOnly) == 1) && (lv_anglefromcentertonearestpoint < -150.0) && (lv_anglefromcentertonearestpoint > -180.0))) {
        lv_theproperangle = (180.0 - (lv_anglefromcentertonearestpoint - -180.0));
    }
    else {
        if ((lp_whetherthetargetpointistotheleftoftheunit == false)) {
            lv_theproperangle = (lv_anglefromcentertonearestpoint - 30.0);
        }
        else {
            lv_theproperangle = (lv_anglefromcentertonearestpoint + 30.0);
        }
    }
    lv_finalpoint = PointWithOffsetPolar(lp_locationoftheattackedunit, 7.0, lv_theproperangle);
    return lv_finalpoint;
}

void libRED3_gf_Accuraterotation (fixed lp_angleX, fixed lp_angleY, fixed lp_angleZ, actor lp_actor) {
    // Automatic Variable Declarations
    // Implementation
    ActorSend(lp_actor, libRED3_gf_ZhunQueXuanZhuanFunc(lp_angleX, lp_angleY, lp_angleZ));
}

string libRED3_gf_ZhunQueXuanZhuanFunc (fixed lp_angleX, fixed lp_angleY, fixed lp_angleZ) {
    // Variable Declarations
    fixed lv_forwardX;
    fixed lv_forwardY;
    fixed lv_forwardZ;
    fixed lv_upX;
    fixed lv_upY;
    fixed lv_upZ;
    fixed lv_oB;
    fixed lv_angleBOX;
    fixed lv_x;
    fixed lv_y;
    string lv_message;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_forwardX = (Cos(lp_angleY) * Cos(lp_angleZ));
    lv_forwardY = (Cos(lp_angleY) * Sin(lp_angleZ));
    lv_forwardZ = Sin(lp_angleY);
    lv_x = (Cos(lp_angleX) * Cos((lp_angleY + 90.0)));
    lv_y = Cos((lp_angleX + 90.0));
    lv_oB = SquareRoot(((lv_x * lv_x) + (lv_y * lv_y)));
    lv_angleBOX = (ATan2(lv_y, lv_x) + lp_angleZ);
    lv_upX = (lv_oB * Cos(lv_angleBOX));
    lv_upY = (lv_oB * Sin(lv_angleBOX));
    lv_upZ = (Cos(lp_angleX) * Sin((lp_angleY + 90.0)));
    lv_message = libRED3_gf_Combinedaccuraterotation(lv_forwardX, lv_forwardY, lv_forwardZ, lv_upX, lv_upY, lv_upZ);
    return lv_message;
}

string libRED3_gf_Combinedaccuraterotation (fixed lp_forward_X, fixed lp_forward_Y, fixed lp_forward_Z, fixed lp_up_X, fixed lp_up_Y, fixed lp_up_Z) {
    // Variable Declarations
    string lv_temp;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_temp = "";

    // Implementation
    lv_temp = ("SetRotation {" + (libNtve_gf_Convert3DVectorToString(lp_forward_X, lp_forward_Y, lp_forward_Z) + " " + libNtve_gf_Convert3DVectorToString(lp_up_X, lp_up_Y, lp_up_Z)) + "}");
    return (lv_temp);
}

bool libRED3_gf_Theanglebetweentheunitandthetargetpointisabout (unit lp_unit, point lp_point) {
    // Variable Declarations
    fixed lv_anglebetween;
    fixed lv_unitorientation;
    bool lv_oneispositiveandtheotherisnegative;
    unit lv_attackingunit;
    fixed lv_angle;
    point lv_centerpoint;
    point lv_movingtargetpoint;
    fixed lv_angledifference;
    fixed lv_preliminarydifference;
    bool lv_whetherthetargetpointistotheleftoftheunit;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_oneispositiveandtheotherisnegative = true;

    // Implementation
    lv_anglebetween = AngleBetweenPoints(UnitGetPosition(lp_unit), lp_point);
    lv_unitorientation = UnitGetFacing(lp_unit);
    if (((lv_unitorientation >= 0.0) && (lv_anglebetween >= 0.0))) {
        lv_oneispositiveandtheotherisnegative = false;
        if (((lv_unitorientation >= lv_anglebetween))) {
            lv_whetherthetargetpointistotheleftoftheunit = false;
        }
        else {
            lv_whetherthetargetpointistotheleftoftheunit = true;
        }
    }

    if (((lv_unitorientation < 0.0) && (lv_anglebetween < 0.0))) {
        lv_oneispositiveandtheotherisnegative = false;
        if (((lv_unitorientation >= lv_anglebetween))) {
            lv_whetherthetargetpointistotheleftoftheunit = false;
        }
        else {
            lv_whetherthetargetpointistotheleftoftheunit = true;
        }
    }

    if ((lv_oneispositiveandtheotherisnegative == true)) {
        if ((lv_anglebetween < 0.0)) {
            lv_preliminarydifference = (lv_anglebetween-(lv_unitorientation - 360.0));
            if ((lv_preliminarydifference <= 180.0)) {
                lv_whetherthetargetpointistotheleftoftheunit = true;
            }
            else {
                lv_whetherthetargetpointistotheleftoftheunit = false;
            }
        }
        else {
            if ((lv_unitorientation < 0.0)) {
                lv_preliminarydifference = (lv_unitorientation-(lv_anglebetween - 360.0));
                if ((lv_preliminarydifference <= 180.0)) {
                    lv_whetherthetargetpointistotheleftoftheunit = false;
                }
                else {
                    lv_whetherthetargetpointistotheleftoftheunit = true;
                }
            }

        }
    }

    return lv_whetherthetargetpointistotheleftoftheunit;
}

trigger auto_libRED3_gf_Actormessagerotation_Trigger = null;
unit auto_libRED3_gf_Actormessagerotation_lp_attackingunit;
fixed auto_libRED3_gf_Actormessagerotation_lp_headtiltangle;
fixed auto_libRED3_gf_Actormessagerotation_lp_sidewaistangle;

void libRED3_gf_Actormessagerotation (unit lp_attackingunit, fixed lp_headtiltangle, fixed lp_sidewaistangle) {
    auto_libRED3_gf_Actormessagerotation_lp_attackingunit = lp_attackingunit;
    auto_libRED3_gf_Actormessagerotation_lp_headtiltangle = lp_headtiltangle;
    auto_libRED3_gf_Actormessagerotation_lp_sidewaistangle = lp_sidewaistangle;

    if (auto_libRED3_gf_Actormessagerotation_Trigger == null) {
        auto_libRED3_gf_Actormessagerotation_Trigger = TriggerCreate("auto_libRED3_gf_Actormessagerotation_TriggerFunc");
    }

    TriggerExecute(auto_libRED3_gf_Actormessagerotation_Trigger, false, false);
}

bool auto_libRED3_gf_Actormessagerotation_TriggerFunc (bool testConds, bool runActions) {
    unit lp_attackingunit = auto_libRED3_gf_Actormessagerotation_lp_attackingunit;
    fixed lp_headtiltangle = auto_libRED3_gf_Actormessagerotation_lp_headtiltangle;
    fixed lp_sidewaistangle = auto_libRED3_gf_Actormessagerotation_lp_sidewaistangle;

    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SendActorMessageToUnit(lp_attackingunit, libRED3_gf_ZhunQueXuanZhuanFunc(lp_sidewaistangle, lp_headtiltangle, UnitGetFacing(lp_attackingunit)));
    return true;
}

fixed libRED3_gf_Angledifferencebetweenunitandtargetpoint (unit lp_unit, point lp_point) {
    // Variable Declarations
    fixed lv_anglebetween;
    fixed lv_unitorientation;
    bool lv_oneispositiveandtheotherisnegative;
    unit lv_attackingunit;
    fixed lv_angle;
    point lv_centerpoint;
    point lv_movetargetpoint;
    fixed lv_angledifference;
    fixed lv_preliminarydifference;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_oneispositiveandtheotherisnegative = true;

    // Implementation
    lv_anglebetween = AngleBetweenPoints(UnitGetPosition(lp_unit), lp_point);
    lv_unitorientation = UnitGetFacing(lp_unit);
    if (((lv_unitorientation >= 0.0) && (lv_anglebetween >= 0.0))) {
        lv_oneispositiveandtheotherisnegative = false;
        if (((lv_unitorientation >= lv_anglebetween))) {
            lv_angledifference = (lv_unitorientation - lv_anglebetween);
        }
        else {
            lv_angledifference = (lv_anglebetween - lv_unitorientation);
        }
    }

    if (((lv_unitorientation < 0.0) && (lv_anglebetween < 0.0))) {
        lv_oneispositiveandtheotherisnegative = false;
        lv_anglebetween = AbsF(lv_anglebetween);
        lv_unitorientation = AbsF(lv_unitorientation);
        if (((lv_unitorientation >= lv_anglebetween))) {
            lv_angledifference = (lv_unitorientation - lv_anglebetween);
        }
        else {
            lv_angledifference = (lv_anglebetween - lv_unitorientation);
        }
    }

    if ((lv_oneispositiveandtheotherisnegative == true)) {
        if ((lv_anglebetween < 0.0)) {
            lv_preliminarydifference = (lv_anglebetween-(lv_unitorientation - 360.0));
            if ((lv_preliminarydifference <= 180.0)) {
                lv_angledifference = lv_preliminarydifference;
            }
            else {
                lv_angledifference = (360.0 - lv_preliminarydifference);
            }
        }
        else {
            if ((lv_unitorientation < 0.0)) {
                lv_preliminarydifference = (lv_unitorientation-(lv_anglebetween - 360.0));
                if ((lv_preliminarydifference <= 180.0)) {
                    lv_angledifference = lv_preliminarydifference;
                }
                else {
                    lv_angledifference = (360.0 - lv_preliminarydifference);
                }
            }

        }
    }

    return lv_angledifference;
}

trigger auto_libRED3_gf_Continuemovingtotargetpoint_Trigger = null;
unit auto_libRED3_gf_Continuemovingtotargetpoint_lp_attackingunit;
point auto_libRED3_gf_Continuemovingtotargetpoint_lp_point;
fixed auto_libRED3_gf_Continuemovingtotargetpoint_lp_movingdistance;

void libRED3_gf_Continuemovingtotargetpoint (unit lp_attackingunit, point lp_point, fixed lp_movingdistance) {
    auto_libRED3_gf_Continuemovingtotargetpoint_lp_attackingunit = lp_attackingunit;
    auto_libRED3_gf_Continuemovingtotargetpoint_lp_point = lp_point;
    auto_libRED3_gf_Continuemovingtotargetpoint_lp_movingdistance = lp_movingdistance;

    if (auto_libRED3_gf_Continuemovingtotargetpoint_Trigger == null) {
        auto_libRED3_gf_Continuemovingtotargetpoint_Trigger = TriggerCreate("auto_libRED3_gf_Continuemovingtotargetpoint_TriggerFunc");
    }

    TriggerExecute(auto_libRED3_gf_Continuemovingtotargetpoint_Trigger, false, false);
}

bool auto_libRED3_gf_Continuemovingtotargetpoint_TriggerFunc (bool testConds, bool runActions) {
    unit lp_attackingunit = auto_libRED3_gf_Continuemovingtotargetpoint_lp_attackingunit;
    point lp_point = auto_libRED3_gf_Continuemovingtotargetpoint_lp_point;
    fixed lp_movingdistance = auto_libRED3_gf_Continuemovingtotargetpoint_lp_movingdistance;

    // Variable Declarations
    fixed lv_distance;
    point lv_predeterminedtargetpoint;

    // Automatic Variable Declarations
    const int autoE3927A84_n = 1;
    int autoE3927A84_i;

    // Variable Initialization

    // Implementation
    lv_distance = DistanceBetweenPoints(UnitGetPosition(lp_attackingunit), lp_point);
    for (autoE3927A84_i = 1; autoE3927A84_i <= autoE3927A84_n; autoE3927A84_i += 1) {
        lv_predeterminedtargetpoint = PointWithOffsetPolar(UnitGetPosition(lp_attackingunit), lp_movingdistance, AngleBetweenPoints(UnitGetPosition(lp_attackingunit), lp_point));
        if ((RegionContainsPoint(RegionPlayableMap(), lv_predeterminedtargetpoint) == true)) {
            libRED3_gf_ContinuousOrientationAlgorithm(lp_attackingunit, lv_predeterminedtargetpoint);
            UnitCreateEffectPoint(lp_attackingunit, "SIInfestedBunkerUprootedRangedFarForcePush3", lv_predeterminedtargetpoint);
            Wait(0.0625, c_timeGame);
        }
        else {
            break;
        }
    }
    return true;
}

trigger auto_libRED3_gf_ContinuousOrientationAlgorithm_Trigger = null;
unit auto_libRED3_gf_ContinuousOrientationAlgorithm_lp_attackingunit;
point auto_libRED3_gf_ContinuousOrientationAlgorithm_lp_point;

void libRED3_gf_ContinuousOrientationAlgorithm (unit lp_attackingunit, point lp_point) {
    auto_libRED3_gf_ContinuousOrientationAlgorithm_lp_attackingunit = lp_attackingunit;
    auto_libRED3_gf_ContinuousOrientationAlgorithm_lp_point = lp_point;

    if (auto_libRED3_gf_ContinuousOrientationAlgorithm_Trigger == null) {
        auto_libRED3_gf_ContinuousOrientationAlgorithm_Trigger = TriggerCreate("auto_libRED3_gf_ContinuousOrientationAlgorithm_TriggerFunc");
    }

    TriggerExecute(auto_libRED3_gf_ContinuousOrientationAlgorithm_Trigger, false, false);
}

bool auto_libRED3_gf_ContinuousOrientationAlgorithm_TriggerFunc (bool testConds, bool runActions) {
    unit lp_attackingunit = auto_libRED3_gf_ContinuousOrientationAlgorithm_lp_attackingunit;
    point lp_point = auto_libRED3_gf_ContinuousOrientationAlgorithm_lp_point;

    // Variable Declarations
    fixed lv_anglebetween;
    fixed lv_anglebetween2;
    fixed lv_unitorientation;
    fixed lv_unitOrientation2;
    bool lv_oneispositiveandtheotherisnegative;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_oneispositiveandtheotherisnegative = true;

    // Implementation
    lv_anglebetween = AngleBetweenPoints(UnitGetPosition(lp_attackingunit), lp_point);
    lv_unitorientation = UnitGetFacing(lp_attackingunit);
    if (((lv_unitorientation >= 0.0) && (lv_anglebetween >= 0.0))) {
        if ((lv_unitorientation < (lv_anglebetween - 10.0))) {
            UnitSetFacing(lp_attackingunit, (lv_unitorientation + 10.0), 0.0625);
        }
        else {
            if ((lv_unitorientation > (lv_anglebetween + 10.0))) {
                UnitSetFacing(lp_attackingunit, (lv_unitorientation - 10.0), 0.0625);
            }
            else {
                UnitSetFacing(lp_attackingunit, lv_anglebetween, 0.0625);
            }
        }
        lv_oneispositiveandtheotherisnegative = false;
    }

    if (((lv_unitorientation < 0.0) && (lv_anglebetween < 0.0))) {
        if ((lv_unitorientation < (lv_anglebetween - 10.0))) {
            UnitSetFacing(lp_attackingunit, (lv_unitorientation + 10.0), 0.0625);
        }
        else {
            if ((lv_unitorientation > (lv_anglebetween + 10.0))) {
                UnitSetFacing(lp_attackingunit, (lv_unitorientation - 10.0), 0.0625);
            }
            else {
                UnitSetFacing(lp_attackingunit, lv_anglebetween, 0.0625);
            }
        }
        lv_oneispositiveandtheotherisnegative = false;
    }

    if ((lv_oneispositiveandtheotherisnegative == true)) {
        if ((lv_anglebetween < 0.0)) {
            if (((lv_unitorientation + (0.0 - lv_anglebetween)) <= 180.0)) {
                if (((lv_unitorientation + (0.0 - lv_anglebetween)) <= 10.0)) {
                    UnitSetFacing(lp_attackingunit, lv_anglebetween, 0.0625);
                }
                else {
                    UnitSetFacing(lp_attackingunit, (lv_unitorientation - 10.0), 0.0625);
                }
            }
            else {
                if (((lv_unitorientation + (0.0 - lv_anglebetween)) > 180.0)) {
                    if (((lv_unitorientation + (0.0 - lv_anglebetween)) >= 350.0)) {
                        UnitSetFacing(lp_attackingunit, lv_anglebetween, 0.0625);
                    }
                    else {
                        UnitSetFacing(lp_attackingunit, (lv_unitorientation + 10.0), 0.0625);
                    }
                }

            }
        }
        else {
            if ((lv_unitorientation < 0.0)) {
                if (((lv_anglebetween + (0.0 - lv_unitorientation)) <= 180.0)) {
                    if (((lv_anglebetween + (0.0 - lv_unitorientation)) <= 10.0)) {
                        UnitSetFacing(lp_attackingunit, lv_anglebetween, 0.0625);
                    }
                    else {
                        UnitSetFacing(lp_attackingunit, (lv_unitorientation + 10.0), 0.0625);
                    }
                }
                else {
                    if (((lv_anglebetween + (0.0 - lv_unitorientation)) > 180.0)) {
                        if (((lv_anglebetween + (0.0 - lv_unitorientation)) >= 350.0)) {
                            UnitSetFacing(lp_attackingunit, lv_anglebetween, 0.0625);
                        }
                        else {
                            UnitSetFacing(lp_attackingunit, (lv_unitorientation - 10.0), 0.0625);
                        }
                    }

                }
            }

        }
    }

    return true;
}

trigger auto_libRED3_gf_Cruiseoncewhilestopped_Trigger = null;
unit auto_libRED3_gf_Cruiseoncewhilestopped_lp_attackingunit;
point auto_libRED3_gf_Cruiseoncewhilestopped_lp_centerpoint;

void libRED3_gf_Cruiseoncewhilestopped (unit lp_attackingunit, point lp_centerpoint) {
    auto_libRED3_gf_Cruiseoncewhilestopped_lp_attackingunit = lp_attackingunit;
    auto_libRED3_gf_Cruiseoncewhilestopped_lp_centerpoint = lp_centerpoint;

    if (auto_libRED3_gf_Cruiseoncewhilestopped_Trigger == null) {
        auto_libRED3_gf_Cruiseoncewhilestopped_Trigger = TriggerCreate("auto_libRED3_gf_Cruiseoncewhilestopped_TriggerFunc");
    }

    TriggerExecute(auto_libRED3_gf_Cruiseoncewhilestopped_Trigger, false, false);
}

bool auto_libRED3_gf_Cruiseoncewhilestopped_TriggerFunc (bool testConds, bool runActions) {
    unit lp_attackingunit = auto_libRED3_gf_Cruiseoncewhilestopped_lp_attackingunit;
    point lp_centerpoint = auto_libRED3_gf_Cruiseoncewhilestopped_lp_centerpoint;

    // Variable Declarations
    point lv_movetargetpoint;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    UnitBehaviorAdd(lp_attackingunit, "xfzzpx", lp_attackingunit, 1);
    lv_movetargetpoint = libRED3_gf_SurroundAttackAcquisitionPoint(lp_attackingunit, lp_centerpoint);
    libRED3_gf_Continuemovingtotargetpoint(lp_attackingunit, lv_movetargetpoint, 0.2);
    return true;
}

trigger auto_libRED3_gf_Cruiseoncewhendestroyingatarget_Trigger = null;
unit auto_libRED3_gf_Cruiseoncewhendestroyingatarget_lp_attackingunit;
point auto_libRED3_gf_Cruiseoncewhendestroyingatarget_lp_centerpoint;

void libRED3_gf_Cruiseoncewhendestroyingatarget (unit lp_attackingunit, point lp_centerpoint) {
    auto_libRED3_gf_Cruiseoncewhendestroyingatarget_lp_attackingunit = lp_attackingunit;
    auto_libRED3_gf_Cruiseoncewhendestroyingatarget_lp_centerpoint = lp_centerpoint;

    if (auto_libRED3_gf_Cruiseoncewhendestroyingatarget_Trigger == null) {
        auto_libRED3_gf_Cruiseoncewhendestroyingatarget_Trigger = TriggerCreate("auto_libRED3_gf_Cruiseoncewhendestroyingatarget_TriggerFunc");
    }

    TriggerExecute(auto_libRED3_gf_Cruiseoncewhendestroyingatarget_Trigger, false, false);
}

bool auto_libRED3_gf_Cruiseoncewhendestroyingatarget_TriggerFunc (bool testConds, bool runActions) {
    unit lp_attackingunit = auto_libRED3_gf_Cruiseoncewhendestroyingatarget_lp_attackingunit;
    point lp_centerpoint = auto_libRED3_gf_Cruiseoncewhendestroyingatarget_lp_centerpoint;

    // Variable Declarations
    point lv_movetargetpoint;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    UnitBehaviorAdd(lp_attackingunit, "xfzzpx", lp_attackingunit, 1);
    lv_movetargetpoint = libRED3_gf_SurroundAttackAcquisitionPoint(lp_attackingunit, lp_centerpoint);
    libRED3_gf_Continuemovingtotargetpoint(lp_attackingunit, lv_movetargetpoint, 0.2);
    return true;
}

point libRED3_gf_SurroundAttackAcquisitionPoint (unit lp_attackingunit, point lp_locationoftheattackedunit) {
    // Variable Declarations
    point[37] lv_circlePoint;
    int lv_a;
    int lv_b;
    fixed lv_distance;
    point lv_closestpoint;
    fixed lv_anglefromcentertonearestpoint;
    fixed lv_theproperangle;
    point lv_finalpoint;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_distance = 200.0;

    // Implementation
    lv_anglefromcentertonearestpoint = AngleBetweenPoints(lp_locationoftheattackedunit, UnitGetPosition(lp_attackingunit));
    if (((TechTreeUnitCount(1, "Nexus", c_techCountCompleteOnly) == 1) && (lv_anglefromcentertonearestpoint < -150.0) && (lv_anglefromcentertonearestpoint > -180.0))) {
        lv_theproperangle = (180.0 - (lv_anglefromcentertonearestpoint - -180.0));
    }
    else {
        lv_theproperangle = (lv_anglefromcentertonearestpoint - 30.0);
    }
    lv_finalpoint = PointWithOffsetPolar(lp_locationoftheattackedunit, 10.0, lv_theproperangle);
    return lv_finalpoint;
}

trigger auto_libRED3_gf_Loadingtheairfieldwithfighterjets_Trigger = null;
unit auto_libRED3_gf_Loadingtheairfieldwithfighterjets_lp_airport;
unit auto_libRED3_gf_Loadingtheairfieldwithfighterjets_lp_fighter;

void libRED3_gf_Loadingtheairfieldwithfighterjets (unit lp_airport, unit lp_fighter) {
    auto_libRED3_gf_Loadingtheairfieldwithfighterjets_lp_airport = lp_airport;
    auto_libRED3_gf_Loadingtheairfieldwithfighterjets_lp_fighter = lp_fighter;

    if (auto_libRED3_gf_Loadingtheairfieldwithfighterjets_Trigger == null) {
        auto_libRED3_gf_Loadingtheairfieldwithfighterjets_Trigger = TriggerCreate("auto_libRED3_gf_Loadingtheairfieldwithfighterjets_TriggerFunc");
    }

    TriggerExecute(auto_libRED3_gf_Loadingtheairfieldwithfighterjets_Trigger, false, false);
}

bool auto_libRED3_gf_Loadingtheairfieldwithfighterjets_TriggerFunc (bool testConds, bool runActions) {
    unit lp_airport = auto_libRED3_gf_Loadingtheairfieldwithfighterjets_lp_airport;
    unit lp_fighter = auto_libRED3_gf_Loadingtheairfieldwithfighterjets_lp_fighter;

    int init_i;

    // Variable Declarations
    unit lv_airport;
    unit lv_airplane;
    point lv_landingpoint;
    point lv_lowerlandingpoint;
    point lv_upperlandingpoint;
    fixed lv_angledifference;
    fixed lv_turningtime;
    int lv_aircraftheading;
    string lv_airportcustomvaluestringtotal;
    string[5] lv_airportcustomvaluestringgroup;
    int lv_useslot;
    unitgroup lv_airportunitgroup;

    // Automatic Variable Declarations
    const int auto372C4E89_ae = 4;
    int auto372C4E89_var;
    const int auto89150867_ae = 4;
    int auto89150867_var;
    int autoCBE1A5A3_val;
    int auto7BE733D7_val;
    int auto3D5EC36C_val;
    int auto3A5A907A_val;

    // Variable Initialization
    lv_airportcustomvaluestringtotal = "";
    for (init_i = 0; init_i <= 4; init_i += 1) {
        lv_airportcustomvaluestringgroup[init_i] = "";
    }
    lv_airportunitgroup = UnitGroupEmpty();

    // Implementation
    TextExpressionSetToken("Param/Expression/lib_RED3_46EE1FDB", "A", StringToText((UnitGetType(lp_airport))));
    TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_RED3_46EE1FDB"), true);
    lv_airplane = lp_fighter;
    lv_airport = lp_airport;
    UnitBehaviorAdd(lv_airplane, "jcfjjl", lv_airplane, 1);
    lv_airportcustomvaluestringtotal = IntToString(FixedToInt(UnitGetCustomValue(lv_airport, libRED3_gv_airportcustomvalue)));
    auto372C4E89_var = 1;
    for ( ; auto372C4E89_var <= auto372C4E89_ae; auto372C4E89_var += 1 ) {
        lv_airportcustomvaluestringgroup[auto372C4E89_var] = StringSub(lv_airportcustomvaluestringtotal, auto372C4E89_var, auto372C4E89_var);
    }
    auto89150867_var = 1;
    for ( ; auto89150867_var <= auto89150867_ae; auto89150867_var += 1 ) {
        if ((lv_airportcustomvaluestringgroup[auto89150867_var] == "1")) {
            lv_useslot = auto89150867_var;
            UnitSetCustomValue(lv_airplane, libRED3_gv_aircraftcustomvalue, auto89150867_var);
            lv_airportcustomvaluestringgroup[auto89150867_var] = "2";
            lv_airportcustomvaluestringtotal = (lv_airportcustomvaluestringgroup[1] + lv_airportcustomvaluestringgroup[2] + lv_airportcustomvaluestringgroup[3] + lv_airportcustomvaluestringgroup[4]);
            UnitSetCustomValue(lv_airport, libRED3_gv_airportcustomvalue, StringToFixed(lv_airportcustomvaluestringtotal));
            break;
        }

    }
    if ((UnitGetType(lv_airport) == "AuAirport")) {
        UnitCreateEffectUnit(lv_airplane, "jfjzzzjc2", lv_airport);
        lv_upperlandingpoint = PointWithOffsetPolar(UnitGetPosition(lv_airport), -1.1, UnitGetFacing(lv_airport));
        lv_lowerlandingpoint = PointWithOffsetPolar(UnitGetPosition(lv_airport), 0.7, UnitGetFacing(lv_airport));
        auto3D5EC36C_val = lv_useslot;
        if (auto3D5EC36C_val == 1) {
            lv_landingpoint = PointWithOffsetPolar(lv_lowerlandingpoint, 1.7, (UnitGetFacing(lv_airport) + 90.0));
            lv_aircraftheading = 160;
        }
        else if (auto3D5EC36C_val == 2) {
            lv_landingpoint = PointWithOffsetPolar(lv_upperlandingpoint, 1.7, (UnitGetFacing(lv_airport) + 90.0));
            lv_aircraftheading = 160;
        }
        else if (auto3D5EC36C_val == 3) {
            lv_landingpoint = PointWithOffsetPolar(lv_lowerlandingpoint, 1.7, (UnitGetFacing(lv_airport) - 90.0));
            lv_aircraftheading = 340;
        }
        else if (auto3D5EC36C_val == 4) {
            lv_landingpoint = PointWithOffsetPolar(lv_upperlandingpoint, 1.7, (UnitGetFacing(lv_airport) - 90.0));
            lv_aircraftheading = 340;
        }
        else {
        }
        UnitSetPosition(lv_airplane, lv_landingpoint, false);
    }
    else {
        if ((UnitGetType(lv_airport) == "SuAirport")) {
            UnitCreateEffectUnit(lv_airplane, "jfjzzzjc", lv_airport);
            lv_upperlandingpoint = PointWithOffsetPolar(UnitGetPosition(lv_airport), -1.0, UnitGetFacing(lv_airport));
            lv_lowerlandingpoint = PointWithOffsetPolar(UnitGetPosition(lv_airport), 1.0, UnitGetFacing(lv_airport));
            auto7BE733D7_val = lv_useslot;
            if (auto7BE733D7_val == 1) {
                lv_landingpoint = PointWithOffsetPolar(lv_lowerlandingpoint, 2.3, (UnitGetFacing(lv_airport) + 90.0));
                lv_aircraftheading = 340;
            }
            else if (auto7BE733D7_val == 2) {
                lv_landingpoint = PointWithOffsetPolar(lv_lowerlandingpoint, 2.3, (UnitGetFacing(lv_airport) - 90.0));
                lv_aircraftheading = 160;
            }
            else if (auto7BE733D7_val == 3) {
                lv_landingpoint = PointWithOffsetPolar(lv_upperlandingpoint, 2.3, (UnitGetFacing(lv_airport) - 90.0));
                lv_aircraftheading = 160;
            }
            else if (auto7BE733D7_val == 4) {
                lv_landingpoint = PointWithOffsetPolar(lv_upperlandingpoint, 2.3, (UnitGetFacing(lv_airport) + 90.0));
                lv_aircraftheading = 340;
            }
            else {
            }
            UnitSetPosition(lv_airplane, lv_landingpoint, false);
        }
        else {
            UnitCreateEffectUnit(lv_airplane, "jfjzzzjc4", lv_airport);
            lv_upperlandingpoint = PointWithOffsetPolar(UnitGetPosition(lv_airport), -1.0, UnitGetFacing(lv_airport));
            lv_lowerlandingpoint = PointWithOffsetPolar(UnitGetPosition(lv_airport), 1.0, UnitGetFacing(lv_airport));
            autoCBE1A5A3_val = lv_useslot;
            if (autoCBE1A5A3_val == 1) {
                lv_landingpoint = PointWithOffsetPolar(lv_lowerlandingpoint, 2.3, (UnitGetFacing(lv_airport) + 90.0));
                lv_aircraftheading = 340;
            }
            else if (autoCBE1A5A3_val == 2) {
                lv_landingpoint = PointWithOffsetPolar(lv_lowerlandingpoint, 2.3, (UnitGetFacing(lv_airport) - 90.0));
                lv_aircraftheading = 160;
            }
            else if (autoCBE1A5A3_val == 3) {
                lv_landingpoint = PointWithOffsetPolar(lv_upperlandingpoint, 2.3, (UnitGetFacing(lv_airport) - 90.0));
                lv_aircraftheading = 160;
            }
            else if (autoCBE1A5A3_val == 4) {
                lv_landingpoint = PointWithOffsetPolar(lv_upperlandingpoint, 2.3, (UnitGetFacing(lv_airport) + 90.0));
                lv_aircraftheading = 340;
            }
            else {
            }
            UnitSetPosition(lv_airplane, lv_landingpoint, false);
        }
    }
    UnitSetPosition(lv_airplane, lv_landingpoint, false);
    UnitSetPosition(lv_airplane, lv_landingpoint, false);
    UnitSetPosition(lv_airplane, lv_landingpoint, false);
    auto3A5A907A_val = lv_useslot;
    if (auto3A5A907A_val == 1) {
        libNtve_gf_SendActorMessageToUnit(lv_airport, "AnimBracketStart A Stand,Work,Start,A Stand,Work,A Stand,Work,End,A FullMatch");
    }
    else if (auto3A5A907A_val == 2) {
        libNtve_gf_SendActorMessageToUnit(lv_airport, "AnimBracketStart B Stand,Work,Start,B Stand,Work,B Stand,Work,End,B FullMatch");
    }
    else if (auto3A5A907A_val == 3) {
        libNtve_gf_SendActorMessageToUnit(lv_airport, "AnimBracketStart C Stand,Work,Start,C Stand,Work,C Stand,Work,End,C FullMatch");
    }
    else if (auto3A5A907A_val == 4) {
        libNtve_gf_SendActorMessageToUnit(lv_airport, "AnimBracketStart D Stand,Work,Start,D Stand,Work,D Stand,Work,End,D FullMatch");
    }
    else {
    }
    UnitBehaviorAdd(lv_airplane, "jzsyqf", lv_airplane, 1);
    UnitBehaviorSetDuration(lv_airplane, "jzsyqf", 1.0);
    UnitBehaviorAdd(lv_airplane, "jcfjjl", lv_airplane, 1);
    UnitBehaviorAdd(lv_airplane, "fjfxjkjc", lv_airplane, 1);
    UnitCreateEffectUnit(lv_airport, "jfjzzzjc3", lv_airplane);
    UnitBehaviorAdd(lv_airplane, "yfpcw2", lv_airplane, 1);
    UnitBehaviorRemove(lv_airplane, "yfpcw", 1);
    UnitSetFacing(lv_airplane, lv_aircraftheading, 0.0);
    UnitSetHeight(lv_airplane, 0.1, 0.0);
    return true;
}

trigger auto_libRED3_gf_Restoreairportslotsbasedonaircraftcustomvalues_Trigger = null;
unit auto_libRED3_gf_Restoreairportslotsbasedonaircraftcustomvalues_lp_airplane;
unit auto_libRED3_gf_Restoreairportslotsbasedonaircraftcustomvalues_lp_airport;

void libRED3_gf_Restoreairportslotsbasedonaircraftcustomvalues (unit lp_airplane, unit lp_airport) {
    auto_libRED3_gf_Restoreairportslotsbasedonaircraftcustomvalues_lp_airplane = lp_airplane;
    auto_libRED3_gf_Restoreairportslotsbasedonaircraftcustomvalues_lp_airport = lp_airport;

    if (auto_libRED3_gf_Restoreairportslotsbasedonaircraftcustomvalues_Trigger == null) {
        auto_libRED3_gf_Restoreairportslotsbasedonaircraftcustomvalues_Trigger = TriggerCreate("auto_libRED3_gf_Restoreairportslotsbasedonaircraftcustomvalues_TriggerFunc");
    }

    TriggerExecute(auto_libRED3_gf_Restoreairportslotsbasedonaircraftcustomvalues_Trigger, false, false);
}

bool auto_libRED3_gf_Restoreairportslotsbasedonaircraftcustomvalues_TriggerFunc (bool testConds, bool runActions) {
    unit lp_airplane = auto_libRED3_gf_Restoreairportslotsbasedonaircraftcustomvalues_lp_airplane;
    unit lp_airport = auto_libRED3_gf_Restoreairportslotsbasedonaircraftcustomvalues_lp_airport;

    int init_i;

    // Variable Declarations
    string lv_airportcustomvaluestringtotal;
    string[5] lv_airportcustomvaluestringgroup;

    // Automatic Variable Declarations
    const int autoF33FB9E2_ae = 4;
    int autoF33FB9E2_var;
    fixed autoF7A30BB5_val;

    // Variable Initialization
    lv_airportcustomvaluestringtotal = "";
    for (init_i = 0; init_i <= 4; init_i += 1) {
        lv_airportcustomvaluestringgroup[init_i] = "";
    }

    // Implementation
    lv_airportcustomvaluestringtotal = IntToString(FixedToInt(UnitGetCustomValue(lp_airport, libRED3_gv_airportcustomvalue)));
    autoF33FB9E2_var = 1;
    for ( ; autoF33FB9E2_var <= autoF33FB9E2_ae; autoF33FB9E2_var += 1 ) {
        lv_airportcustomvaluestringgroup[autoF33FB9E2_var] = StringSub(lv_airportcustomvaluestringtotal, autoF33FB9E2_var, autoF33FB9E2_var);
    }
    lv_airportcustomvaluestringgroup[FixedToInt(UnitGetCustomValue(lp_airplane, libRED3_gv_aircraftcustomvalue))] = "1";
    lv_airportcustomvaluestringtotal = (lv_airportcustomvaluestringgroup[1] + lv_airportcustomvaluestringgroup[2] + lv_airportcustomvaluestringgroup[3] + lv_airportcustomvaluestringgroup[4]);
    UnitSetCustomValue(lp_airport, libRED3_gv_airportcustomvalue, StringToFixed(lv_airportcustomvaluestringtotal));
    autoF7A30BB5_val = UnitGetCustomValue(lp_airplane, libRED3_gv_aircraftcustomvalue);
    if (autoF7A30BB5_val == 1) {
        libNtve_gf_SendActorMessageToUnit(lp_airport, "AnimBracketStop A");
    }
    else if (autoF7A30BB5_val == 2) {
        libNtve_gf_SendActorMessageToUnit(lp_airport, "AnimBracketStop B");
    }
    else if (autoF7A30BB5_val == 3) {
        libNtve_gf_SendActorMessageToUnit(lp_airport, "AnimBracketStop C");
    }
    else if (autoF7A30BB5_val == 4) {
        libNtve_gf_SendActorMessageToUnit(lp_airport, "AnimBracketStop D");
    }
    else {
    }
    return true;
}

void libRED3_gf_Theplanetakesoff (unit lp_airplane) {
    // Automatic Variable Declarations
    // Implementation
    UnitBehaviorRemove(lp_airplane, "jcfjjl", 1);
    UnitBehaviorRemove(lp_airplane, "yfpcw2", 1);
    UnitBehaviorRemove(lp_airplane, "ydsjnjzpx", 1);
    UnitCreateEffectUnit(lp_airplane, "xfwzztjblzzdw22", lp_airplane);
    UnitBehaviorRemove(lp_airplane, "fjfxjkjc", 1);
    UnitBehaviorAdd(lp_airplane, "qfydsjnjzwqhzx", lp_airplane, 1);
    if ((UnitGetType(lp_airplane) == "AlliedCenturyBomber")) {
        UnitSetHeight(lp_airplane, 5.0, 1.6);
        UnitBehaviorSetDuration(lp_airplane, "qfydsjnjzwqhzx", 1.6);
    }
    else {
        UnitSetHeight(lp_airplane, 5.0, 0.75);
        UnitBehaviorSetDuration(lp_airplane, "qfydsjnjzwqhzx", 0.75);
    }
}

point libRED3_gf_SurroundAttackAcquisitionPointLargeBomber (unit lp_attackingunit, point lp_locationoftheattackedunit) {
    // Variable Declarations
    point[37] lv_circlepoint;
    int lv_a;
    int lv_b;
    fixed lv_distance;
    point lv_closestpoint;
    fixed lv_anglefromcentertonearestpoint;
    fixed lv_theproperangle;
    point lv_finalpoint;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_distance = 200.0;

    // Implementation
    lv_anglefromcentertonearestpoint = AngleBetweenPoints(lp_locationoftheattackedunit, UnitGetPosition(lp_attackingunit));
    if (((TechTreeUnitCount(1, "Nexus", c_techCountCompleteOnly) == 1) && (lv_anglefromcentertonearestpoint < -150.0) && (lv_anglefromcentertonearestpoint > -180.0))) {
        lv_theproperangle = (180.0 - (lv_anglefromcentertonearestpoint - -180.0));
    }
    else {
        lv_theproperangle = (lv_anglefromcentertonearestpoint - 30.0);
    }
    lv_finalpoint = PointWithOffsetPolar(lp_locationoftheattackedunit, 10.0, lv_theproperangle);
    return lv_finalpoint;
}

point libRED3_gf_OrbitalAttackAcquisitionPointPeacekeeperBomber (unit lp_attackingunit, point lp_locationoftheattackedunit) {
    // Variable Declarations
    point[37] lv_circlepoint;
    int lv_a;
    int lv_b;
    fixed lv_distance;
    point lv_closestpoint;
    fixed lv_anglefromcentertonearestpoint;
    fixed lv_theproperangle;
    point lv_finalpoint;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_distance = 200.0;

    // Implementation
    lv_anglefromcentertonearestpoint = AngleBetweenPoints(lp_locationoftheattackedunit, UnitGetPosition(lp_attackingunit));
    if (((TechTreeUnitCount(1, "Nexus", c_techCountCompleteOnly) == 1) && (lv_anglefromcentertonearestpoint < -150.0) && (lv_anglefromcentertonearestpoint > -180.0))) {
        lv_theproperangle = (180.0 - (lv_anglefromcentertonearestpoint - -180.0));
    }
    else {
        lv_theproperangle = (lv_anglefromcentertonearestpoint - 30.0);
    }
    lv_finalpoint = PointWithOffsetPolar(UnitGetPosition(lp_attackingunit), 1.0, lv_theproperangle);
    return lv_finalpoint;
}

point libRED3_gf_HoveringAcquisitionPointPeacekeeperBomber (unit lp_attackingunit, point lp_locationoftheattackedunit) {
    // Variable Declarations
    point[37] lv_circlePoint;
    int lv_a;
    int lv_b;
    fixed lv_distance;
    point lv_closestpoint;
    fixed lv_anglefromcentertonearestpoint;
    fixed lv_theproperangle;
    point lv_finalpoint;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_distance = 200.0;

    // Implementation
    lv_anglefromcentertonearestpoint = AngleBetweenPoints(lp_locationoftheattackedunit, UnitGetPosition(lp_attackingunit));
    if (((TechTreeUnitCount(1, "Nexus", c_techCountCompleteOnly) == 1) && (lv_anglefromcentertonearestpoint < -150.0) && (lv_anglefromcentertonearestpoint > -180.0))) {
        lv_theproperangle = (180.0 - (lv_anglefromcentertonearestpoint - -180.0));
    }
    else {
        lv_theproperangle = (lv_anglefromcentertonearestpoint - 30.0);
    }
    lv_finalpoint = PointWithOffsetPolar(lp_locationoftheattackedunit, 3.0, lv_theproperangle);
    return lv_finalpoint;
}

point libRED3_gf_Circleacquisitionpointotherlargebombers (unit lp_attackingunit, point lp_locationoftheattackedunit) {
    // Variable Declarations
    point[37] lv_circlepoint;
    int lv_a;
    int lv_b;
    fixed lv_distance;
    point lv_closestpoint;
    fixed lv_anglefromcentertonearestpoint;
    fixed lv_theproperangle;
    point lv_finalpoint;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_distance = 200.0;

    // Implementation
    lv_anglefromcentertonearestpoint = AngleBetweenPoints(lp_locationoftheattackedunit, UnitGetPosition(lp_attackingunit));
    if (((TechTreeUnitCount(1, "Nexus", c_techCountCompleteOnly) == 1) && (lv_anglefromcentertonearestpoint < -150.0) && (lv_anglefromcentertonearestpoint > -180.0))) {
        lv_theproperangle = (180.0 - (lv_anglefromcentertonearestpoint - -180.0));
    }
    else {
        lv_theproperangle = (lv_anglefromcentertonearestpoint - 30.0);
    }
    lv_finalpoint = PointWithOffsetPolar(lp_locationoftheattackedunit, 10.0, lv_theproperangle);
    return lv_finalpoint;
}

trigger auto_libRED3_gf_OnecruisewhilestationaryAlliedfighteraircraft_Trigger = null;
unit auto_libRED3_gf_OnecruisewhilestationaryAlliedfighteraircraft_lp_attackingunit;
point auto_libRED3_gf_OnecruisewhilestationaryAlliedfighteraircraft_lp_centerpoint;

void libRED3_gf_OnecruisewhilestationaryAlliedfighteraircraft (unit lp_attackingunit, point lp_centerpoint) {
    auto_libRED3_gf_OnecruisewhilestationaryAlliedfighteraircraft_lp_attackingunit = lp_attackingunit;
    auto_libRED3_gf_OnecruisewhilestationaryAlliedfighteraircraft_lp_centerpoint = lp_centerpoint;

    if (auto_libRED3_gf_OnecruisewhilestationaryAlliedfighteraircraft_Trigger == null) {
        auto_libRED3_gf_OnecruisewhilestationaryAlliedfighteraircraft_Trigger = TriggerCreate("auto_libRED3_gf_OnecruisewhilestationaryAlliedfighteraircraft_TriggerFunc");
    }

    TriggerExecute(auto_libRED3_gf_OnecruisewhilestationaryAlliedfighteraircraft_Trigger, false, false);
}

bool auto_libRED3_gf_OnecruisewhilestationaryAlliedfighteraircraft_TriggerFunc (bool testConds, bool runActions) {
    unit lp_attackingunit = auto_libRED3_gf_OnecruisewhilestationaryAlliedfighteraircraft_lp_attackingunit;
    point lp_centerpoint = auto_libRED3_gf_OnecruisewhilestationaryAlliedfighteraircraft_lp_centerpoint;

    // Variable Declarations
    point lv_movetargetpoint;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    UnitBehaviorAdd(lp_attackingunit, "xfzzpx", lp_attackingunit, 1);
    lv_movetargetpoint = libRED3_gf_HoveringAcquisitionPointPeacekeeperBomber(lp_attackingunit, lp_centerpoint);
    libRED3_gf_Continuemovingtotargetpoint(lp_attackingunit, lv_movetargetpoint, 0.2);
    return true;
}

// Triggers
//--------------------------------------------------------------------------------------------------
// Trigger: Unit upgrade special effects
//--------------------------------------------------------------------------------------------------
bool libRED3_gt_Unitupgradespecialeffects_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_AttachActorToUnit(EventUnit(), "K5KerriganLevelUp2", "Ref_Origin");
    return true;
}

//--------------------------------------------------------------------------------------------------
void libRED3_gt_Unitupgradespecialeffects_Init () {
    libRED3_gt_Unitupgradespecialeffects = TriggerCreate("libRED3_gt_Unitupgradespecialeffects_Func");
    TriggerAddEventUnitGainLevel(libRED3_gt_Unitupgradespecialeffects, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Units gain experience by rising stars.
//--------------------------------------------------------------------------------------------------
bool libRED3_gt_Unitsgainexperiencebyrisingstars_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    int autoD90B4BED_val;

    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) != 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoD90B4BED_val = TechTreeUpgradeCount(1, "AuTechlvP132", c_techCountCompleteOnly);
    if (autoD90B4BED_val == 1) {
        UnitXPAddXP(libNtve_gf_KillingUnit(), null, ((UnitTypeGetCost(UnitGetType(EventUnit()), c_unitCostSumMineralsVespene) / 16.0) + ((UnitGetPropertyFixed(EventUnit(), c_unitPropLifeMax, c_unitPropNormal) + UnitGetPropertyFixed(EventUnit(), c_unitPropShieldsMax, c_unitPropNormal)) / 32.0)));
    }
    else {
        UnitXPAddXP(libNtve_gf_KillingUnit(), null, ((UnitTypeGetCost(UnitGetType(EventUnit()), c_unitCostSumMineralsVespene) / 20.0) + ((UnitGetPropertyFixed(EventUnit(), c_unitPropLifeMax, c_unitPropNormal) + UnitGetPropertyFixed(EventUnit(), c_unitPropShieldsMax, c_unitPropNormal)) / 40.0)));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libRED3_gt_Unitsgainexperiencebyrisingstars_Init () {
    libRED3_gt_Unitsgainexperiencebyrisingstars = TriggerCreate("libRED3_gt_Unitsgainexperiencebyrisingstars_Func");
    TriggerAddEventUnitDied(libRED3_gt_Unitsgainexperiencebyrisingstars, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Player commander repair panel settings
//--------------------------------------------------------------------------------------------------
bool libRED3_gt_Playercommanderrepairpanelsettings_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto65DCE44D_g;
    int auto65DCE44D_var;
    string auto2BC380F9_val;

    // Actions
    if (!runActions) {
        return true;
    }

    auto65DCE44D_g = GameAttributePlayersForTeam(1);
    auto65DCE44D_var = -1;
    while (true) {
        auto65DCE44D_var = PlayerGroupNextPlayer(auto65DCE44D_g, auto65DCE44D_var);
        if (auto65DCE44D_var < 0) { break; }
        auto2BC380F9_val = GameAttributePlayerValue("3", auto65DCE44D_var);
        if (auto2BC380F9_val == "0001") {
            libNtve_gf_CreateUnitsAtPoint2(1, "AubuildDunmmyUnit3232", 0, auto65DCE44D_var, PointFromId(1688986256));
            DialogCreate(500, 550, c_anchorTop, 0, 0, true);
            libRED3_gv_maintenancePanel = DialogLastCreated();
            DialogSetVisible(DialogLastCreated(), PlayerGroupSingle(auto65DCE44D_var), true);
            DialogControlCreateFromTemplate(DialogLastCreated(), c_triggerControlTypeCommandPanel, "SuperWeaponUI/TerranGlobalCommandPanelTemplate");
            libRED3_gv_maintenancecommandpanel = DialogLastCreated();
            DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupSingle(auto65DCE44D_var), c_anchorTop, -250, -10);
            libNtve_gf_SetDialogItemUnitGroup(DialogControlLastCreated(), libNtve_gf_ConvertUnitToUnitGroup(UnitLastCreated()), PlayerGroupSingle(auto65DCE44D_var));
            DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupSingle(auto65DCE44D_var), true);
            DialogSetImageVisible(DialogLastCreated(), false);
        }
        else if (auto2BC380F9_val == "0002") {
            DialogCreate(500, 550, c_anchorTop, 0, 0, true);
            libRED3_gv_maintenancePanel = DialogLastCreated();
            DialogSetVisible(DialogLastCreated(), PlayerGroupSingle(auto65DCE44D_var), true);
            DialogControlCreateFromTemplate(DialogLastCreated(), c_triggerControlTypeCommandPanel, "SuperWeaponUI/TerranGlobalCommandPanelTemplate");
            libRED3_gv_maintenancecommandpanel = DialogLastCreated();
            DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupSingle(auto65DCE44D_var), c_anchorTop, -250, -10);
            libNtve_gf_SetDialogItemUnitGroup(DialogControlLastCreated(), libNtve_gf_ConvertUnitToUnitGroup(UnitLastCreated()), PlayerGroupSingle(auto65DCE44D_var));
            DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupSingle(auto65DCE44D_var), true);
            DialogSetImageVisible(DialogLastCreated(), false);
        }
        else if (auto2BC380F9_val == "0015") {
            DialogCreate(500, 550, c_anchorTop, 0, 0, true);
            libRED3_gv_maintenancePanel = DialogLastCreated();
            DialogSetVisible(DialogLastCreated(), PlayerGroupSingle(auto65DCE44D_var), true);
            DialogControlCreateFromTemplate(DialogLastCreated(), c_triggerControlTypeCommandPanel, "SuperWeaponUI/TerranGlobalCommandPanelTemplate");
            libRED3_gv_maintenancecommandpanel = DialogLastCreated();
            DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupSingle(auto65DCE44D_var), c_anchorTop, -250, -10);
            libNtve_gf_SetDialogItemUnitGroup(DialogControlLastCreated(), libNtve_gf_ConvertUnitToUnitGroup(UnitLastCreated()), PlayerGroupSingle(auto65DCE44D_var));
            DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupSingle(auto65DCE44D_var), true);
            DialogSetImageVisible(DialogLastCreated(), false);
        }
        else if (auto2BC380F9_val == "0016") {
            DialogCreate(500, 550, c_anchorTop, 0, 0, true);
            libRED3_gv_maintenancePanel = DialogLastCreated();
            DialogSetVisible(DialogLastCreated(), PlayerGroupSingle(auto65DCE44D_var), true);
            DialogControlCreateFromTemplate(DialogLastCreated(), c_triggerControlTypeCommandPanel, "SuperWeaponUI/TerranGlobalCommandPanelTemplate");
            libRED3_gv_maintenancecommandpanel = DialogLastCreated();
            DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupSingle(auto65DCE44D_var), c_anchorTop, -250, -10);
            libNtve_gf_SetDialogItemUnitGroup(DialogControlLastCreated(), libNtve_gf_ConvertUnitToUnitGroup(UnitLastCreated()), PlayerGroupSingle(auto65DCE44D_var));
            DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupSingle(auto65DCE44D_var), true);
            DialogSetImageVisible(DialogLastCreated(), false);
        }
        else if (auto2BC380F9_val == "0003") {
            DialogCreate(500, 550, c_anchorTop, 0, 0, true);
            libRED3_gv_maintenancePanel = DialogLastCreated();
            DialogSetVisible(DialogLastCreated(), PlayerGroupSingle(auto65DCE44D_var), true);
            DialogControlCreateFromTemplate(DialogLastCreated(), c_triggerControlTypeCommandPanel, "SuperWeaponUI/TerranGlobalCommandPanelTemplate");
            libRED3_gv_maintenancecommandpanel = DialogLastCreated();
            DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupSingle(auto65DCE44D_var), c_anchorTop, -250, -10);
            libNtve_gf_SetDialogItemUnitGroup(DialogControlLastCreated(), libNtve_gf_ConvertUnitToUnitGroup(UnitLastCreated()), PlayerGroupSingle(auto65DCE44D_var));
            DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupSingle(auto65DCE44D_var), true);
            DialogSetImageVisible(DialogLastCreated(), false);
        }
        else if (auto2BC380F9_val == "0005") {
            DialogCreate(500, 550, c_anchorTop, 0, 0, true);
            libRED3_gv_maintenancePanel = DialogLastCreated();
            DialogSetVisible(DialogLastCreated(), PlayerGroupSingle(auto65DCE44D_var), true);
            DialogControlCreateFromTemplate(DialogLastCreated(), c_triggerControlTypeCommandPanel, "SuperWeaponUI/TerranGlobalCommandPanelTemplate");
            libRED3_gv_maintenancecommandpanel = DialogLastCreated();
            DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupSingle(auto65DCE44D_var), c_anchorTop, -250, -10);
            libNtve_gf_SetDialogItemUnitGroup(DialogControlLastCreated(), libNtve_gf_ConvertUnitToUnitGroup(UnitLastCreated()), PlayerGroupSingle(auto65DCE44D_var));
            DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupSingle(auto65DCE44D_var), true);
            DialogSetImageVisible(DialogLastCreated(), false);
        }
        else if (auto2BC380F9_val == "0009") {
            DialogCreate(500, 550, c_anchorTop, 0, 0, true);
            libRED3_gv_maintenancePanel = DialogLastCreated();
            DialogSetVisible(DialogLastCreated(), PlayerGroupSingle(auto65DCE44D_var), true);
            DialogControlCreateFromTemplate(DialogLastCreated(), c_triggerControlTypeCommandPanel, "SuperWeaponUI/TerranGlobalCommandPanelTemplate");
            libRED3_gv_maintenancecommandpanel = DialogLastCreated();
            DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupSingle(auto65DCE44D_var), c_anchorTop, -250, -10);
            libNtve_gf_SetDialogItemUnitGroup(DialogControlLastCreated(), libNtve_gf_ConvertUnitToUnitGroup(UnitLastCreated()), PlayerGroupSingle(auto65DCE44D_var));
            DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupSingle(auto65DCE44D_var), true);
            DialogSetImageVisible(DialogLastCreated(), false);
        }
        else if (auto2BC380F9_val == "0004") {
            DialogCreate(500, 550, c_anchorTop, 0, 0, true);
            libRED3_gv_maintenancePanel = DialogLastCreated();
            DialogSetVisible(DialogLastCreated(), PlayerGroupSingle(auto65DCE44D_var), true);
            DialogControlCreateFromTemplate(DialogLastCreated(), c_triggerControlTypeCommandPanel, "SuperWeaponUI/TerranGlobalCommandPanelTemplate");
            libRED3_gv_maintenancecommandpanel = DialogLastCreated();
            DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupSingle(auto65DCE44D_var), c_anchorTop, -250, -10);
            libNtve_gf_SetDialogItemUnitGroup(DialogControlLastCreated(), libNtve_gf_ConvertUnitToUnitGroup(UnitLastCreated()), PlayerGroupSingle(auto65DCE44D_var));
            DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupSingle(auto65DCE44D_var), true);
            DialogSetImageVisible(DialogLastCreated(), false);
        }
        else if (auto2BC380F9_val == "0006") {
            DialogCreate(500, 550, c_anchorTop, 0, 0, true);
            libRED3_gv_maintenancePanel = DialogLastCreated();
            DialogSetVisible(DialogLastCreated(), PlayerGroupSingle(auto65DCE44D_var), true);
            DialogControlCreateFromTemplate(DialogLastCreated(), c_triggerControlTypeCommandPanel, "SuperWeaponUI/TerranGlobalCommandPanelTemplate");
            libRED3_gv_maintenancecommandpanel = DialogLastCreated();
            DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupSingle(auto65DCE44D_var), c_anchorTop, -250, -10);
            libNtve_gf_SetDialogItemUnitGroup(DialogControlLastCreated(), libNtve_gf_ConvertUnitToUnitGroup(UnitLastCreated()), PlayerGroupSingle(auto65DCE44D_var));
            DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupSingle(auto65DCE44D_var), true);
            DialogSetImageVisible(DialogLastCreated(), false);
        }
        else if (auto2BC380F9_val == "0008") {
            DialogCreate(500, 550, c_anchorTop, 0, 0, true);
            libRED3_gv_maintenancePanel = DialogLastCreated();
            DialogSetVisible(DialogLastCreated(), PlayerGroupSingle(auto65DCE44D_var), true);
            DialogControlCreateFromTemplate(DialogLastCreated(), c_triggerControlTypeCommandPanel, "SuperWeaponUI/TerranGlobalCommandPanelTemplate");
            libRED3_gv_maintenancecommandpanel = DialogLastCreated();
            DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupSingle(auto65DCE44D_var), c_anchorTop, -250, -10);
            libNtve_gf_SetDialogItemUnitGroup(DialogControlLastCreated(), libNtve_gf_ConvertUnitToUnitGroup(UnitLastCreated()), PlayerGroupSingle(auto65DCE44D_var));
            DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupSingle(auto65DCE44D_var), true);
            DialogSetImageVisible(DialogLastCreated(), false);
        }
        else if (auto2BC380F9_val == "0017") {
            DialogCreate(500, 550, c_anchorTop, 0, 0, true);
            libRED3_gv_maintenancePanel = DialogLastCreated();
            DialogSetVisible(DialogLastCreated(), PlayerGroupSingle(auto65DCE44D_var), true);
            DialogControlCreateFromTemplate(DialogLastCreated(), c_triggerControlTypeCommandPanel, "SuperWeaponUI/TerranGlobalCommandPanelTemplate");
            libRED3_gv_maintenancecommandpanel = DialogLastCreated();
            DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupSingle(auto65DCE44D_var), c_anchorTop, -250, -10);
            libNtve_gf_SetDialogItemUnitGroup(DialogControlLastCreated(), libNtve_gf_ConvertUnitToUnitGroup(UnitLastCreated()), PlayerGroupSingle(auto65DCE44D_var));
            DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupSingle(auto65DCE44D_var), true);
            DialogSetImageVisible(DialogLastCreated(), false);
        }
        else if (auto2BC380F9_val == "0012") {
            DialogCreate(500, 550, c_anchorTop, 0, 0, true);
            libRED3_gv_maintenancePanel = DialogLastCreated();
            DialogSetVisible(DialogLastCreated(), PlayerGroupSingle(auto65DCE44D_var), true);
            DialogControlCreateFromTemplate(DialogLastCreated(), c_triggerControlTypeCommandPanel, "SuperWeaponUI/TerranGlobalCommandPanelTemplate");
            libRED3_gv_maintenancecommandpanel = DialogLastCreated();
            DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupSingle(auto65DCE44D_var), c_anchorTop, -250, -10);
            libNtve_gf_SetDialogItemUnitGroup(DialogControlLastCreated(), libNtve_gf_ConvertUnitToUnitGroup(UnitLastCreated()), PlayerGroupSingle(auto65DCE44D_var));
            DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupSingle(auto65DCE44D_var), true);
            DialogSetImageVisible(DialogLastCreated(), false);
        }
        else if (auto2BC380F9_val == "0019") {
            DialogCreate(500, 550, c_anchorTop, 0, 0, true);
            libRED3_gv_maintenancePanel = DialogLastCreated();
            DialogSetVisible(DialogLastCreated(), PlayerGroupSingle(auto65DCE44D_var), true);
            DialogControlCreateFromTemplate(DialogLastCreated(), c_triggerControlTypeCommandPanel, "SuperWeaponUI/TerranGlobalCommandPanelTemplate");
            libRED3_gv_maintenancecommandpanel = DialogLastCreated();
            DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupSingle(auto65DCE44D_var), c_anchorTop, -250, -10);
            libNtve_gf_SetDialogItemUnitGroup(DialogControlLastCreated(), libNtve_gf_ConvertUnitToUnitGroup(UnitLastCreated()), PlayerGroupSingle(auto65DCE44D_var));
            DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupSingle(auto65DCE44D_var), true);
            DialogSetImageVisible(DialogLastCreated(), false);
        }
        else if (auto2BC380F9_val == "0011") {
            DialogCreate(500, 550, c_anchorTop, 0, 0, true);
            libRED3_gv_maintenancePanel = DialogLastCreated();
            DialogSetVisible(DialogLastCreated(), PlayerGroupSingle(auto65DCE44D_var), true);
            DialogControlCreateFromTemplate(DialogLastCreated(), c_triggerControlTypeCommandPanel, "SuperWeaponUI/TerranGlobalCommandPanelTemplate");
            libRED3_gv_maintenancecommandpanel = DialogLastCreated();
            DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupSingle(auto65DCE44D_var), c_anchorTop, -250, -10);
            libNtve_gf_SetDialogItemUnitGroup(DialogControlLastCreated(), libNtve_gf_ConvertUnitToUnitGroup(UnitLastCreated()), PlayerGroupSingle(auto65DCE44D_var));
            DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupSingle(auto65DCE44D_var), true);
            DialogSetImageVisible(DialogLastCreated(), false);
        }
        else if (auto2BC380F9_val == "0013") {
            DialogCreate(500, 550, c_anchorTop, 0, 0, true);
            libRED3_gv_maintenancePanel = DialogLastCreated();
            DialogSetVisible(DialogLastCreated(), PlayerGroupSingle(auto65DCE44D_var), true);
            DialogControlCreateFromTemplate(DialogLastCreated(), c_triggerControlTypeCommandPanel, "SuperWeaponUI/TerranGlobalCommandPanelTemplate");
            libRED3_gv_maintenancecommandpanel = DialogLastCreated();
            DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupSingle(auto65DCE44D_var), c_anchorTop, -250, -10);
            libNtve_gf_SetDialogItemUnitGroup(DialogControlLastCreated(), libNtve_gf_ConvertUnitToUnitGroup(UnitLastCreated()), PlayerGroupSingle(auto65DCE44D_var));
            DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupSingle(auto65DCE44D_var), true);
            DialogSetImageVisible(DialogLastCreated(), false);
        }
        else if (auto2BC380F9_val == "0018") {
            DialogCreate(500, 550, c_anchorTop, 0, 0, true);
            libRED3_gv_maintenancePanel = DialogLastCreated();
            DialogSetVisible(DialogLastCreated(), PlayerGroupSingle(auto65DCE44D_var), true);
            DialogControlCreateFromTemplate(DialogLastCreated(), c_triggerControlTypeCommandPanel, "SuperWeaponUI/TerranGlobalCommandPanelTemplate");
            libRED3_gv_maintenancecommandpanel = DialogLastCreated();
            DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupSingle(auto65DCE44D_var), c_anchorTop, -250, -10);
            libNtve_gf_SetDialogItemUnitGroup(DialogControlLastCreated(), libNtve_gf_ConvertUnitToUnitGroup(UnitLastCreated()), PlayerGroupSingle(auto65DCE44D_var));
            DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupSingle(auto65DCE44D_var), true);
            DialogSetImageVisible(DialogLastCreated(), false);
        }
        else if (auto2BC380F9_val == "0020") {
            DialogCreate(500, 550, c_anchorTop, 0, 0, true);
            libRED3_gv_maintenancePanel = DialogLastCreated();
            DialogSetVisible(DialogLastCreated(), PlayerGroupSingle(auto65DCE44D_var), true);
            DialogControlCreateFromTemplate(DialogLastCreated(), c_triggerControlTypeCommandPanel, "SuperWeaponUI/TerranGlobalCommandPanelTemplate");
            libRED3_gv_maintenancecommandpanel = DialogLastCreated();
            DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupSingle(auto65DCE44D_var), c_anchorTop, -250, -10);
            libNtve_gf_SetDialogItemUnitGroup(DialogControlLastCreated(), libNtve_gf_ConvertUnitToUnitGroup(UnitLastCreated()), PlayerGroupSingle(auto65DCE44D_var));
            DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupSingle(auto65DCE44D_var), true);
            DialogSetImageVisible(DialogLastCreated(), false);
        }
        else if (auto2BC380F9_val == "0022") {
            DialogCreate(500, 550, c_anchorTop, 0, 0, true);
            libRED3_gv_maintenancePanel = DialogLastCreated();
            DialogSetVisible(DialogLastCreated(), PlayerGroupSingle(auto65DCE44D_var), true);
            DialogControlCreateFromTemplate(DialogLastCreated(), c_triggerControlTypeCommandPanel, "SuperWeaponUI/TerranGlobalCommandPanelTemplate");
            libRED3_gv_maintenancecommandpanel = DialogLastCreated();
            DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupSingle(auto65DCE44D_var), c_anchorTop, -250, -10);
            libNtve_gf_SetDialogItemUnitGroup(DialogControlLastCreated(), libNtve_gf_ConvertUnitToUnitGroup(UnitLastCreated()), PlayerGroupSingle(auto65DCE44D_var));
            DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupSingle(auto65DCE44D_var), true);
            DialogSetImageVisible(DialogLastCreated(), false);
        }
        else if (auto2BC380F9_val == "0023") {
            DialogCreate(500, 550, c_anchorTop, 0, 0, true);
            libRED3_gv_maintenancePanel = DialogLastCreated();
            DialogSetVisible(DialogLastCreated(), PlayerGroupSingle(auto65DCE44D_var), true);
            DialogControlCreateFromTemplate(DialogLastCreated(), c_triggerControlTypeCommandPanel, "SuperWeaponUI/TerranGlobalCommandPanelTemplate");
            libRED3_gv_maintenancecommandpanel = DialogLastCreated();
            DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupSingle(auto65DCE44D_var), c_anchorTop, -250, -10);
            libNtve_gf_SetDialogItemUnitGroup(DialogControlLastCreated(), libNtve_gf_ConvertUnitToUnitGroup(UnitLastCreated()), PlayerGroupSingle(auto65DCE44D_var));
            DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupSingle(auto65DCE44D_var), true);
            DialogSetImageVisible(DialogLastCreated(), false);
        }
        else if (auto2BC380F9_val == "0014") {
            DialogCreate(500, 550, c_anchorTop, 0, 0, true);
            libRED3_gv_maintenancePanel = DialogLastCreated();
            DialogSetVisible(DialogLastCreated(), PlayerGroupSingle(auto65DCE44D_var), true);
            DialogControlCreateFromTemplate(DialogLastCreated(), c_triggerControlTypeCommandPanel, "SuperWeaponUI/TerranGlobalCommandPanelTemplate");
            libRED3_gv_maintenancecommandpanel = DialogLastCreated();
            DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupSingle(auto65DCE44D_var), c_anchorTop, -250, -10);
            libNtve_gf_SetDialogItemUnitGroup(DialogControlLastCreated(), libNtve_gf_ConvertUnitToUnitGroup(UnitLastCreated()), PlayerGroupSingle(auto65DCE44D_var));
            DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupSingle(auto65DCE44D_var), true);
            DialogSetImageVisible(DialogLastCreated(), false);
        }
        else if (auto2BC380F9_val == "0025") {
            DialogCreate(500, 550, c_anchorTop, 0, 0, true);
            libRED3_gv_maintenancePanel = DialogLastCreated();
            DialogSetVisible(DialogLastCreated(), PlayerGroupSingle(auto65DCE44D_var), true);
            DialogControlCreateFromTemplate(DialogLastCreated(), c_triggerControlTypeCommandPanel, "SuperWeaponUI/TerranGlobalCommandPanelTemplate");
            libRED3_gv_maintenancecommandpanel = DialogLastCreated();
            DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupSingle(auto65DCE44D_var), c_anchorTop, -250, -10);
            libNtve_gf_SetDialogItemUnitGroup(DialogControlLastCreated(), libNtve_gf_ConvertUnitToUnitGroup(UnitLastCreated()), PlayerGroupSingle(auto65DCE44D_var));
            DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupSingle(auto65DCE44D_var), true);
            DialogSetImageVisible(DialogLastCreated(), false);
        }
        else if (auto2BC380F9_val == "0024") {
            DialogCreate(500, 550, c_anchorTop, 0, 0, true);
            libRED3_gv_maintenancePanel = DialogLastCreated();
            DialogSetVisible(DialogLastCreated(), PlayerGroupSingle(auto65DCE44D_var), true);
            DialogControlCreateFromTemplate(DialogLastCreated(), c_triggerControlTypeCommandPanel, "SuperWeaponUI/TerranGlobalCommandPanelTemplate");
            libRED3_gv_maintenancecommandpanel = DialogLastCreated();
            DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupSingle(auto65DCE44D_var), c_anchorTop, -250, -10);
            libNtve_gf_SetDialogItemUnitGroup(DialogControlLastCreated(), libNtve_gf_ConvertUnitToUnitGroup(UnitLastCreated()), PlayerGroupSingle(auto65DCE44D_var));
            DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupSingle(auto65DCE44D_var), true);
            DialogSetImageVisible(DialogLastCreated(), false);
        }
        else if (auto2BC380F9_val == "0021") {
            DialogCreate(500, 550, c_anchorTop, 0, 0, true);
            libRED3_gv_maintenancePanel = DialogLastCreated();
            DialogSetVisible(DialogLastCreated(), PlayerGroupSingle(auto65DCE44D_var), true);
            DialogControlCreateFromTemplate(DialogLastCreated(), c_triggerControlTypeCommandPanel, "SuperWeaponUI/TerranGlobalCommandPanelTemplate");
            libRED3_gv_maintenancecommandpanel = DialogLastCreated();
            DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupSingle(auto65DCE44D_var), c_anchorTop, -250, -10);
            libNtve_gf_SetDialogItemUnitGroup(DialogControlLastCreated(), libNtve_gf_ConvertUnitToUnitGroup(UnitLastCreated()), PlayerGroupSingle(auto65DCE44D_var));
            DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupSingle(auto65DCE44D_var), true);
            DialogSetImageVisible(DialogLastCreated(), false);
        }
        else if (auto2BC380F9_val == "0026") {
            DialogCreate(500, 550, c_anchorTop, 0, 0, true);
            libRED3_gv_maintenancePanel = DialogLastCreated();
            DialogSetVisible(DialogLastCreated(), PlayerGroupSingle(auto65DCE44D_var), true);
            DialogControlCreateFromTemplate(DialogLastCreated(), c_triggerControlTypeCommandPanel, "SuperWeaponUI/TerranGlobalCommandPanelTemplate");
            libRED3_gv_maintenancecommandpanel = DialogLastCreated();
            DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupSingle(auto65DCE44D_var), c_anchorTop, -250, -10);
            libNtve_gf_SetDialogItemUnitGroup(DialogControlLastCreated(), libNtve_gf_ConvertUnitToUnitGroup(UnitLastCreated()), PlayerGroupSingle(auto65DCE44D_var));
            DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupSingle(auto65DCE44D_var), true);
            DialogSetImageVisible(DialogLastCreated(), false);
        }
        else {
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libRED3_gt_Playercommanderrepairpanelsettings_Init () {
    libRED3_gt_Playercommanderrepairpanelsettings = TriggerCreate("libRED3_gt_Playercommanderrepairpanelsettings_Func");
    TriggerEnable(libRED3_gt_Playercommanderrepairpanelsettings, false);
    TriggerAddEventTimeElapsed(libRED3_gt_Playercommanderrepairpanelsettings, 0.3, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Brainwashing music that activates the Zhige force field
//--------------------------------------------------------------------------------------------------
bool libRED3_gt_BrainwashingmusicthatactivatestheZhigeforcefield_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    SoundtrackPause(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_soundtrackCategoryMusic, true, true);
    Wait(0.5, c_timeGame);
    SoundPlayForPlayer(SoundLink("SuperWeaponReadyVoice2332", -1), c_maxPlayers, PlayerGroupSingle(UnitGetOwner(EventUnit())), 100.0, 0.0);
    Wait(100.0, c_timeGame);
    SoundtrackPause(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_soundtrackCategoryMusic, false, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libRED3_gt_BrainwashingmusicthatactivatestheZhigeforcefield_Init () {
    libRED3_gt_BrainwashingmusicthatactivatestheZhigeforcefield = TriggerCreate("libRED3_gt_BrainwashingmusicthatactivatestheZhigeforcefield_Func");
    TriggerAddEventUnitAbility(libRED3_gt_BrainwashingmusicthatactivatestheZhigeforcefield, null, AbilityCommand("ActivateTheZhigeForceField", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Player commander???s choice of switching music
//--------------------------------------------------------------------------------------------------
bool libRED3_gt_PlayercommanderE28099schoiceofswitchingmusic_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto27B257EF_g;
    int auto27B257EF_var;
    string auto6BE146AD_val;

    // Actions
    if (!runActions) {
        return true;
    }

    auto27B257EF_g = GameAttributePlayersForTeam(1);
    auto27B257EF_var = -1;
    while (true) {
        auto27B257EF_var = PlayerGroupNextPlayer(auto27B257EF_g, auto27B257EF_var);
        if (auto27B257EF_var < 0) { break; }
        auto6BE146AD_val = GameAttributePlayerValue("3", auto27B257EF_var);
        if (auto6BE146AD_val == "0001") {
            TechTreeUpgradeAddLevel(auto27B257EF_var, "unlockupgrade", 1);
            SoundtrackStopCurrent(PlayerGroupSingle(auto27B257EF_var), c_soundtrackCategoryMusic, false);
            SoundtrackDefault(PlayerGroupSingle(auto27B257EF_var), c_soundtrackCategoryMusic, "Music_WW222", c_soundtrackCueAny, c_soundtrackIndexAny);
        }
        else if (auto6BE146AD_val == "0002") {
            TechTreeUpgradeAddLevel(auto27B257EF_var, "unlockupgrade123", 1);
            SoundtrackStopCurrent(PlayerGroupSingle(auto27B257EF_var), c_soundtrackCategoryMusic, false);
            SoundtrackDefault(PlayerGroupSingle(auto27B257EF_var), c_soundtrackCategoryMusic, "Music_WW222", c_soundtrackCueAny, c_soundtrackIndexAny);
        }
        else if (auto6BE146AD_val == "0015") {
            TechTreeUpgradeAddLevel(auto27B257EF_var, "unlockupgrade123", 1);
            SoundtrackStopCurrent(PlayerGroupSingle(auto27B257EF_var), c_soundtrackCategoryMusic, false);
            SoundtrackDefault(PlayerGroupSingle(auto27B257EF_var), c_soundtrackCategoryMusic, "Music_WW223", c_soundtrackCueAny, c_soundtrackIndexAny);
        }
        else if (auto6BE146AD_val == "0016") {
            TechTreeUpgradeAddLevel(auto27B257EF_var, "unlockupgrade123", 1);
            SoundtrackStopCurrent(PlayerGroupSingle(auto27B257EF_var), c_soundtrackCategoryMusic, false);
            SoundtrackDefault(PlayerGroupSingle(auto27B257EF_var), c_soundtrackCategoryMusic, "Music_WW22", c_soundtrackCueAny, c_soundtrackIndexAny);
        }
        else if (auto6BE146AD_val == "0003") {
            TechTreeUpgradeAddLevel(auto27B257EF_var, "unlockupgrade1222", 1);
            SoundtrackStopCurrent(PlayerGroupSingle(auto27B257EF_var), c_soundtrackCategoryMusic, false);
            SoundtrackDefault(PlayerGroupSingle(auto27B257EF_var), c_soundtrackCategoryMusic, "Music_WW22", c_soundtrackCueAny, c_soundtrackIndexAny);
        }
        else if (auto6BE146AD_val == "0005") {
            TechTreeUpgradeAddLevel(auto27B257EF_var, "unlockupgrade122", 1);
            SoundtrackStopCurrent(PlayerGroupSingle(auto27B257EF_var), c_soundtrackCategoryMusic, false);
            SoundtrackDefault(PlayerGroupSingle(auto27B257EF_var), c_soundtrackCategoryMusic, "Music_WW222", c_soundtrackCueAny, c_soundtrackIndexAny);
        }
        else if (auto6BE146AD_val == "0009") {
            TechTreeUpgradeAddLevel(auto27B257EF_var, "unlockupgrade1", 1);
            SoundtrackStopCurrent(PlayerGroupSingle(auto27B257EF_var), c_soundtrackCategoryMusic, false);
            SoundtrackDefault(PlayerGroupSingle(auto27B257EF_var), c_soundtrackCategoryMusic, "Music_WW223", c_soundtrackCueAny, c_soundtrackIndexAny);
        }
        else if (auto6BE146AD_val == "0004") {
            TechTreeUpgradeAddLevel(auto27B257EF_var, "unlockupgrade12", 1);
            SoundtrackStopCurrent(PlayerGroupSingle(auto27B257EF_var), c_soundtrackCategoryMusic, false);
            SoundtrackDefault(PlayerGroupSingle(auto27B257EF_var), c_soundtrackCategoryMusic, "Music_WW22", c_soundtrackCueAny, c_soundtrackIndexAny);
        }
        else if (auto6BE146AD_val == "0006") {
            TechTreeUpgradeAddLevel(auto27B257EF_var, "unlockupgrade1233", 1);
            SoundtrackStopCurrent(PlayerGroupSingle(auto27B257EF_var), c_soundtrackCategoryMusic, false);
            SoundtrackDefault(PlayerGroupSingle(auto27B257EF_var), c_soundtrackCategoryMusic, "Music_WW222", c_soundtrackCueAny, c_soundtrackIndexAny);
        }
        else if (auto6BE146AD_val == "0008") {
            TechTreeUpgradeAddLevel(auto27B257EF_var, "unlockupgrade1232", 1);
            SoundtrackStopCurrent(PlayerGroupSingle(auto27B257EF_var), c_soundtrackCategoryMusic, false);
            SoundtrackDefault(PlayerGroupSingle(auto27B257EF_var), c_soundtrackCategoryMusic, "Music_WW223", c_soundtrackCueAny, c_soundtrackIndexAny);
        }
        else if (auto6BE146AD_val == "0017") {
            TechTreeUpgradeAddLevel(auto27B257EF_var, "unlockupgrade222", 1);
            SoundtrackStopCurrent(PlayerGroupSingle(auto27B257EF_var), c_soundtrackCategoryMusic, false);
            SoundtrackDefault(PlayerGroupSingle(auto27B257EF_var), c_soundtrackCategoryMusic, "Music_WW223", c_soundtrackCueAny, c_soundtrackIndexAny);
        }
        else if (auto6BE146AD_val == "0012") {
            TechTreeUpgradeAddLevel(auto27B257EF_var, "unlockupgrade2", 1);
            SoundtrackStopCurrent(PlayerGroupSingle(auto27B257EF_var), c_soundtrackCategoryMusic, false);
            SoundtrackDefault(PlayerGroupSingle(auto27B257EF_var), c_soundtrackCategoryMusic, "Music_WW22", c_soundtrackCueAny, c_soundtrackIndexAny);
        }
        else if (auto6BE146AD_val == "0019") {
            TechTreeUpgradeAddLevel(auto27B257EF_var, "unlockupgrade23", 1);
            SoundtrackStopCurrent(PlayerGroupSingle(auto27B257EF_var), c_soundtrackCategoryMusic, false);
            SoundtrackDefault(PlayerGroupSingle(auto27B257EF_var), c_soundtrackCategoryMusic, "Music_WW22", c_soundtrackCueAny, c_soundtrackIndexAny);
        }
        else if (auto6BE146AD_val == "0011") {
            TechTreeUpgradeAddLevel(auto27B257EF_var, "unlockupgrade1232", 1);
            SoundtrackStopCurrent(PlayerGroupSingle(auto27B257EF_var), c_soundtrackCategoryMusic, false);
            SoundtrackDefault(PlayerGroupSingle(auto27B257EF_var), c_soundtrackCategoryMusic, "Music_WW22", c_soundtrackCueAny, c_soundtrackIndexAny);
        }
        else if (auto6BE146AD_val == "0013") {
            TechTreeUpgradeAddLevel(auto27B257EF_var, "unlockupgrade12222", 1);
            SoundtrackStopCurrent(PlayerGroupSingle(auto27B257EF_var), c_soundtrackCategoryMusic, false);
            SoundtrackDefault(PlayerGroupSingle(auto27B257EF_var), c_soundtrackCategoryMusic, "Music_WW222", c_soundtrackCueAny, c_soundtrackIndexAny);
        }
        else if (auto6BE146AD_val == "0018") {
            TechTreeUpgradeAddLevel(auto27B257EF_var, "unlockupgrade4", 1);
            SoundtrackStopCurrent(PlayerGroupSingle(auto27B257EF_var), c_soundtrackCategoryMusic, false);
            SoundtrackDefault(PlayerGroupSingle(auto27B257EF_var), c_soundtrackCategoryMusic, "Music_WW222", c_soundtrackCueAny, c_soundtrackIndexAny);
        }
        else if (auto6BE146AD_val == "0020") {
            TechTreeUpgradeAddLevel(auto27B257EF_var, "unlockupgrade1232", 1);
            SoundtrackStopCurrent(PlayerGroupSingle(auto27B257EF_var), c_soundtrackCategoryMusic, false);
            SoundtrackDefault(PlayerGroupSingle(auto27B257EF_var), c_soundtrackCategoryMusic, "Music_WW222", c_soundtrackCueAny, c_soundtrackIndexAny);
        }
        else if (auto6BE146AD_val == "0014") {
            TechTreeUpgradeAddLevel(auto27B257EF_var, "unlockupgrade22", 1);
            SoundtrackStopCurrent(PlayerGroupSingle(auto27B257EF_var), c_soundtrackCategoryMusic, false);
            SoundtrackDefault(PlayerGroupSingle(auto27B257EF_var), c_soundtrackCategoryMusic, "Music_WW224", c_soundtrackCueAny, c_soundtrackIndexAny);
        }
        else if (auto6BE146AD_val == "0021") {
            TechTreeUpgradeAddLevel(auto27B257EF_var, "unlockupgrade223", 1);
            SoundtrackStopCurrent(PlayerGroupSingle(auto27B257EF_var), c_soundtrackCategoryMusic, false);
            SoundtrackDefault(PlayerGroupSingle(auto27B257EF_var), c_soundtrackCategoryMusic, "Music_WW224", c_soundtrackCueAny, c_soundtrackIndexAny);
        }
        else if (auto6BE146AD_val == "0024") {
            TechTreeUpgradeAddLevel(auto27B257EF_var, "unlockupgrade12223", 1);
            SoundtrackStopCurrent(PlayerGroupSingle(auto27B257EF_var), c_soundtrackCategoryMusic, false);
            SoundtrackDefault(PlayerGroupSingle(auto27B257EF_var), c_soundtrackCategoryMusic, "Music_WW224", c_soundtrackCueAny, c_soundtrackIndexAny);
        }
        else if (auto6BE146AD_val == "0026") {
            TechTreeUpgradeAddLevel(auto27B257EF_var, "unlockupgrade123", 1);
            SoundtrackStopCurrent(PlayerGroupSingle(auto27B257EF_var), c_soundtrackCategoryMusic, false);
            SoundtrackDefault(PlayerGroupSingle(auto27B257EF_var), c_soundtrackCategoryMusic, "Music_WW224", c_soundtrackCueAny, c_soundtrackIndexAny);
        }
        else if (auto6BE146AD_val == "0025") {
            TechTreeUpgradeAddLevel(auto27B257EF_var, "unlockupgrade1232", 1);
            SoundtrackStopCurrent(PlayerGroupSingle(auto27B257EF_var), c_soundtrackCategoryMusic, false);
            SoundtrackDefault(PlayerGroupSingle(auto27B257EF_var), c_soundtrackCategoryMusic, "Music_WW224", c_soundtrackCueAny, c_soundtrackIndexAny);
        }
        else if (auto6BE146AD_val == "0022") {
            TechTreeUpgradeAddLevel(auto27B257EF_var, "unlockupgrade124", 1);
            SoundtrackStopCurrent(PlayerGroupSingle(auto27B257EF_var), c_soundtrackCategoryMusic, false);
            SoundtrackDefault(PlayerGroupSingle(auto27B257EF_var), c_soundtrackCategoryMusic, "Music_WW222", c_soundtrackCueAny, c_soundtrackIndexAny);
        }
        else if (auto6BE146AD_val == "0023") {
            TechTreeUpgradeAddLevel(auto27B257EF_var, "unlockupgrade1", 1);
            SoundtrackStopCurrent(PlayerGroupSingle(auto27B257EF_var), c_soundtrackCategoryMusic, false);
            SoundtrackDefault(PlayerGroupSingle(auto27B257EF_var), c_soundtrackCategoryMusic, "Music_WW222", c_soundtrackCueAny, c_soundtrackIndexAny);
        }
        else {
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libRED3_gt_PlayercommanderE28099schoiceofswitchingmusic_Init () {
    libRED3_gt_PlayercommanderE28099schoiceofswitchingmusic = TriggerCreate("libRED3_gt_PlayercommanderE28099schoiceofswitchingmusic_Func");
    TriggerAddEventMapInit(libRED3_gt_PlayercommanderE28099schoiceofswitchingmusic);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Initial minecart sound effect Soviet
//--------------------------------------------------------------------------------------------------
bool libRED3_gt_InitialminecartsoundeffectSoviet_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    SoundPlayForPlayer(SoundLink("SuOreMiner_What", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libRED3_gt_InitialminecartsoundeffectSoviet_Init () {
    libRED3_gt_InitialminecartsoundeffectSoviet = TriggerCreate("libRED3_gt_InitialminecartsoundeffectSoviet_Func");
    TriggerAddEventPlayerEffectUsed(libRED3_gt_InitialminecartsoundeffectSoviet, c_playerAny, "JurefinerycreateMiner4");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Initial minecart sound effect Empire
//--------------------------------------------------------------------------------------------------
bool libRED3_gt_InitialminecartsoundeffectEmpire_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    SoundPlayForPlayer(SoundLink("JuYorico_What9", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libRED3_gt_InitialminecartsoundeffectEmpire_Init () {
    libRED3_gt_InitialminecartsoundeffectEmpire = TriggerCreate("libRED3_gt_InitialminecartsoundeffectEmpire_Func");
    TriggerAddEventPlayerEffectUsed(libRED3_gt_InitialminecartsoundeffectEmpire, c_playerAny, "JurefinerycreateMiner");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Initial minecart sound effect Shenzhou
//--------------------------------------------------------------------------------------------------
bool libRED3_gt_InitialminecartsoundeffectShenzhou_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    SoundPlayForPlayer(SoundLink("SuOreMiner_What44", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libRED3_gt_InitialminecartsoundeffectShenzhou_Init () {
    libRED3_gt_InitialminecartsoundeffectShenzhou = TriggerCreate("libRED3_gt_InitialminecartsoundeffectShenzhou_Func");
    TriggerAddEventPlayerEffectUsed(libRED3_gt_InitialminecartsoundeffectShenzhou, c_playerAny, "JurefinerycreateMiner3");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Initial minecart sound effect Allies
//--------------------------------------------------------------------------------------------------
bool libRED3_gt_InitialminecartsoundeffectAllies_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    SoundPlayForPlayer(SoundLink("JuYorico_What96", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libRED3_gt_InitialminecartsoundeffectAllies_Init () {
    libRED3_gt_InitialminecartsoundeffectAllies = TriggerCreate("libRED3_gt_InitialminecartsoundeffectAllies_Func");
    TriggerAddEventPlayerEffectUsed(libRED3_gt_InitialminecartsoundeffectAllies, c_playerAny, "JurefinerycreateMiner2");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Allies build voice trigger
//--------------------------------------------------------------------------------------------------
bool libRED3_gt_Alliesbuildvoicetrigger_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if (((libNtve_gf_TriggeringProgressUnitType() == "AuPowerPlant") && (TechTreeUnitCount(EventPlayer(), "AuPowerPlant", c_techCountCompleteOnly) < 1))) {
        SoundPlayForPlayer(SoundLink("JUConstructionComplete222", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
    }
    else if (((libNtve_gf_TriggeringProgressUnitType() == "AuRefinery") && (TechTreeUnitCount(EventPlayer(), "AuRefinery", c_techCountCompleteOnly) < 1))) {
        SoundPlayForPlayer(SoundLink("JUConstructionComplete222", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
    }
    else if (((libNtve_gf_TriggeringProgressUnitType() == "AuBarrack") && (TechTreeUnitCount(EventPlayer(), "AuBarrack", c_techCountCompleteOnly) < 1))) {
        SoundPlayForPlayer(SoundLink("JUConstructionComplete222", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
    }
    else if (((libNtve_gf_TriggeringProgressUnitType() == "AuWarFactory") && (TechTreeUnitCount(EventPlayer(), "AuWarFactory", c_techCountCompleteOnly) < 1))) {
        SoundPlayForPlayer(SoundLink("JUConstructionComplete222", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
    }
    else if (((libNtve_gf_TriggeringProgressUnitType() == "AuOldFactory") && (TechTreeUnitCount(EventPlayer(), "AuOldFactory", c_techCountCompleteOnly) < 1))) {
        SoundPlayForPlayer(SoundLink("JUConstructionComplete222", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
    }
    else if (((libNtve_gf_TriggeringProgressUnitType() == "AuArtilleryFactory") && (TechTreeUnitCount(EventPlayer(), "AuArtilleryFactory", c_techCountCompleteOnly) < 1))) {
        SoundPlayForPlayer(SoundLink("JUConstructionComplete222", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
    }
    else if (((libNtve_gf_TriggeringProgressUnitType() == "AuAirport") && (TechTreeUnitCount(EventPlayer(), "AuAirport", c_techCountCompleteOnly) < 1))) {
        SoundPlayForPlayer(SoundLink("JUConstructionComplete222", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
    }
    else if (((libNtve_gf_TriggeringProgressUnitType() == "AuAlliedradar") && (TechTreeUnitCount(EventPlayer(), "AuAlliedradar", c_techCountCompleteOnly) < 1))) {
        SoundPlayForPlayer(SoundLink("JUConstructionComplete222", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
    }
    else if (((libNtve_gf_TriggeringProgressUnitType() == "AuDefenseBureau") && (TechTreeUnitCount(EventPlayer(), "AuDefenseBureau", c_techCountCompleteOnly) < 1))) {
        SoundPlayForPlayer(SoundLink("JUConstructionComplete222", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
    }
    else if (((libNtve_gf_TriggeringProgressUnitType() == "AuAdvancedPowerPlant") && (TechTreeUnitCount(EventPlayer(), "AuAdvancedPowerPlant", c_techCountCompleteOnly) < 1))) {
        SoundPlayForPlayer(SoundLink("JUConstructionComplete222", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libRED3_gt_Alliesbuildvoicetrigger_Init () {
    libRED3_gt_Alliesbuildvoicetrigger = TriggerCreate("libRED3_gt_Alliesbuildvoicetrigger_Func");
    TriggerAddEventUnitConstructProgress(libRED3_gt_Alliesbuildvoicetrigger, null, c_unitProgressStageStart);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Empire Building Voice Trigger
//--------------------------------------------------------------------------------------------------
bool libRED3_gt_EmpireBuildingVoiceTrigger_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if (((libNtve_gf_TriggeringProgressUnitType() == "JpPowerPlant") && (TechTreeUnitCount(EventPlayer(), "JpPowerPlant", c_techCountQueuedOrBetter) <= 1))) {
        Wait(1.7, c_timeGame);
        SoundPlayForPlayer(SoundLink("JUConstructionComplete2224", -1), c_maxPlayers, PlayerGroupSingle(UnitGetOwner(EventUnitProgressUnit())), 100.0, 0.0);
    }
    else if (((libNtve_gf_TriggeringProgressUnitType() == "JpImperialMine") && (TechTreeUnitCount(EventPlayer(), "JpImperialMine", c_techCountQueuedOrBetter) <= 1))) {
        Wait(1.7, c_timeGame);
        SoundPlayForPlayer(SoundLink("JUConstructionComplete2224", -1), c_maxPlayers, PlayerGroupSingle(UnitGetOwner(EventUnitProgressUnit())), 100.0, 0.0);
    }
    else if (((libNtve_gf_TriggeringProgressUnitType() == "JpBarracks") && (TechTreeUnitCount(EventPlayer(), "JpBarracks", c_techCountQueuedOrBetter) <= 1))) {
        Wait(1.7, c_timeGame);
        SoundPlayForPlayer(SoundLink("JUConstructionComplete2224", -1), c_maxPlayers, PlayerGroupSingle(UnitGetOwner(EventUnitProgressUnit())), 100.0, 0.0);
    }
    else if (((libNtve_gf_TriggeringProgressUnitType() == "JpWarFactory") && (TechTreeUnitCount(EventPlayer(), "JpWarFactory", c_techCountQueuedOrBetter) <= 1))) {
        Wait(1.7, c_timeGame);
        SoundPlayForPlayer(SoundLink("JUConstructionComplete2224", -1), c_maxPlayers, PlayerGroupSingle(UnitGetOwner(EventUnitProgressUnit())), 100.0, 0.0);
    }
    else if (((libNtve_gf_TriggeringProgressUnitType() == "JpMechFactory") && (TechTreeUnitCount(EventPlayer(), "JpMechFactory", c_techCountQueuedOrBetter) <= 1))) {
        Wait(1.7, c_timeGame);
        SoundPlayForPlayer(SoundLink("JUConstructionComplete2224", -1), c_maxPlayers, PlayerGroupSingle(UnitGetOwner(EventUnitProgressUnit())), 100.0, 0.0);
    }
    else if (((libNtve_gf_TriggeringProgressUnitType() == "Radar") && (TechTreeUnitCount(EventPlayer(), "Radar", c_techCountQueuedOrBetter) <= 1))) {
        Wait(1.7, c_timeGame);
        SoundPlayForPlayer(SoundLink("JUConstructionComplete2224", -1), c_maxPlayers, PlayerGroupSingle(UnitGetOwner(EventUnitProgressUnit())), 100.0, 0.0);
    }
    else if (((libNtve_gf_TriggeringProgressUnitType() == "JpImperialNanohost") && (TechTreeUnitCount(EventPlayer(), "JpImperialNanohost", c_techCountQueuedOrBetter) <= 1))) {
        Wait(1.7, c_timeGame);
        SoundPlayForPlayer(SoundLink("JUConstructionComplete2224", -1), c_maxPlayers, PlayerGroupSingle(UnitGetOwner(EventUnitProgressUnit())), 100.0, 0.0);
    }
    else if (((libNtve_gf_TriggeringProgressUnitType() == "CnNuclearPowerPlant") && (TechTreeUnitCount(EventPlayer(), "CnNuclearPowerPlant", c_techCountQueuedOrBetter) <= 1))) {
        Wait(1.7, c_timeGame);
        SoundPlayForPlayer(SoundLink("JUConstructionComplete2224", -1), c_maxPlayers, PlayerGroupSingle(UnitGetOwner(EventUnitProgressUnit())), 100.0, 0.0);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libRED3_gt_EmpireBuildingVoiceTrigger_Init () {
    libRED3_gt_EmpireBuildingVoiceTrigger = TriggerCreate("libRED3_gt_EmpireBuildingVoiceTrigger_Func");
    TriggerAddEventUnitConstructProgress(libRED3_gt_EmpireBuildingVoiceTrigger, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: China builds voice triggers
//--------------------------------------------------------------------------------------------------
bool libRED3_gt_Chinabuildsvoicetriggers_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if (((libNtve_gf_TriggeringProgressUnitType() == "CnTeslaReactor") && (TechTreeUnitCount(EventPlayer(), "CnTeslaReactor", c_techCountQueuedOrBetter) <= 1))) {
        Wait(1.3, c_timeGame);
        SoundPlayForPlayer(SoundLink("JUConstructionComplete2223", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
    }
    else if (((libNtve_gf_TriggeringProgressUnitType() == "CnSmeltingFurnace") && (TechTreeUnitCount(EventPlayer(), "CnSmeltingFurnace", c_techCountQueuedOrBetter) <= 1))) {
        Wait(1.3, c_timeGame);
        SoundPlayForPlayer(SoundLink("JUConstructionComplete2223", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
    }
    else if (((libNtve_gf_TriggeringProgressUnitType() == "CnBarracks") && (TechTreeUnitCount(EventPlayer(), "CnBarracks", c_techCountQueuedOrBetter) <= 1))) {
        Wait(1.3, c_timeGame);
        SoundPlayForPlayer(SoundLink("JUConstructionComplete2223", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
    }
    else if (((libNtve_gf_TriggeringProgressUnitType() == "CnHeavyArmorWorkshop") && (TechTreeUnitCount(EventPlayer(), "CnHeavyArmorWorkshop", c_techCountQueuedOrBetter) <= 1))) {
        Wait(1.3, c_timeGame);
        SoundPlayForPlayer(SoundLink("JUConstructionComplete2223", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
    }
    else if (((libNtve_gf_TriggeringProgressUnitType() == "CnWarFactory") && (TechTreeUnitCount(EventPlayer(), "CnWarFactory", c_techCountQueuedOrBetter) <= 1))) {
        Wait(1.3, c_timeGame);
        SoundPlayForPlayer(SoundLink("JUConstructionComplete2223", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
    }
    else if (((libNtve_gf_TriggeringProgressUnitType() == "CnRadar") && (TechTreeUnitCount(EventPlayer(), "CnRadar", c_techCountQueuedOrBetter) <= 1))) {
        Wait(1.3, c_timeGame);
        SoundPlayForPlayer(SoundLink("JUConstructionComplete2223", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
    }
    else if (((libNtve_gf_TriggeringProgressUnitType() == "RuSolvebuilding") && (TechTreeUnitCount(EventPlayer(), "RuSolvebuilding", c_techCountQueuedOrBetter) <= 1))) {
        Wait(1.3, c_timeGame);
        SoundPlayForPlayer(SoundLink("JUConstructionComplete2223", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
    }
    else if (((libNtve_gf_TriggeringProgressUnitType() == "CnLargeFossilfuelpowerstation") && (TechTreeUnitCount(EventPlayer(), "CnLargeFossilfuelpowerstation", c_techCountQueuedOrBetter) <= 1))) {
        Wait(1.3, c_timeGame);
        SoundPlayForPlayer(SoundLink("JUConstructionComplete2223", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
    }
    else if (((libNtve_gf_TriggeringProgressUnitType() == "CnAirport") && (TechTreeUnitCount(EventPlayer(), "CnAirport", c_techCountQueuedOrBetter) <= 1))) {
        Wait(1.3, c_timeGame);
        SoundPlayForPlayer(SoundLink("JUConstructionComplete2223", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libRED3_gt_Chinabuildsvoicetriggers_Init () {
    libRED3_gt_Chinabuildsvoicetriggers = TriggerCreate("libRED3_gt_Chinabuildsvoicetriggers_Func");
    TriggerAddEventUnitConstructProgress(libRED3_gt_Chinabuildsvoicetriggers, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: New Constrrctuion Options Available
//--------------------------------------------------------------------------------------------------
bool libRED3_gt_NewConstrrctuionOptionsAvailable_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if (((libNtve_gf_TriggeringProgressUnitType() == "SuReactor") && (TechTreeUnitCount(EventPlayer(), "SuReactor", c_techCountQueuedOrBetter) <= 1))) {
        Wait(1.8, c_timeGame);
        SoundPlayForPlayer(SoundLink("JUConstructionComplete2222", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
    }
    else if (((libNtve_gf_TriggeringProgressUnitType() == "SuRefinery") && (TechTreeUnitCount(EventPlayer(), "SuRefinery", c_techCountQueuedOrBetter) <= 1))) {
        Wait(1.8, c_timeGame);
        SoundPlayForPlayer(SoundLink("JUConstructionComplete2222", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
    }
    else if (((libNtve_gf_TriggeringProgressUnitType() == "SuBarracks") && (TechTreeUnitCount(EventPlayer(), "SuBarracks", c_techCountQueuedOrBetter) <= 1))) {
        Wait(1.8, c_timeGame);
        SoundPlayForPlayer(SoundLink("JUConstructionComplete2222", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
    }
    else if (((libNtve_gf_TriggeringProgressUnitType() == "NukeSiloNova") && (TechTreeUnitCount(EventPlayer(), "NukeSiloNova", c_techCountQueuedOrBetter) <= 1))) {
        Wait(1.8, c_timeGame);
        SoundPlayForPlayer(SoundLink("JUConstructionComplete2222", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
    }
    else if (((libNtve_gf_TriggeringProgressUnitType() == "SuRussiamArtilleryFactory") && (TechTreeUnitCount(EventPlayer(), "SuRussiamArtilleryFactory", c_techCountQueuedOrBetter) <= 1))) {
        Wait(1.8, c_timeGame);
        SoundPlayForPlayer(SoundLink("JUConstructionComplete2222", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
    }
    else if (((libNtve_gf_TriggeringProgressUnitType() == "SuHeavyArtilleryFactory") && (TechTreeUnitCount(EventPlayer(), "SuHeavyArtilleryFactory", c_techCountQueuedOrBetter) <= 1))) {
        Wait(1.8, c_timeGame);
        SoundPlayForPlayer(SoundLink("JUConstructionComplete2222", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
    }
    else if (((libNtve_gf_TriggeringProgressUnitType() == "SuMechaFactory") && (TechTreeUnitCount(EventPlayer(), "SuMechaFactory", c_techCountQueuedOrBetter) <= 1))) {
        Wait(1.8, c_timeGame);
        SoundPlayForPlayer(SoundLink("JUConstructionComplete2222", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
    }
    else if (((libNtve_gf_TriggeringProgressUnitType() == "SuArtilleryFactory") && (TechTreeUnitCount(EventPlayer(), "SuArtilleryFactory", c_techCountQueuedOrBetter) <= 1))) {
        Wait(1.8, c_timeGame);
        SoundPlayForPlayer(SoundLink("JUConstructionComplete2222", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
    }
    else if (((libNtve_gf_TriggeringProgressUnitType() == "SuAirport") && (TechTreeUnitCount(EventPlayer(), "SuAirport", c_techCountQueuedOrBetter) <= 1))) {
        Wait(1.8, c_timeGame);
        SoundPlayForPlayer(SoundLink("JUConstructionComplete2222", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
    }
    else if (((libNtve_gf_TriggeringProgressUnitType() == "SuRadar") && (TechTreeUnitCount(EventPlayer(), "SuRadar", c_techCountQueuedOrBetter) <= 1))) {
        Wait(1.8, c_timeGame);
        SoundPlayForPlayer(SoundLink("JUConstructionComplete2222", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
    }
    else if (((libNtve_gf_TriggeringProgressUnitType() == "SuWarLaboratory") && (TechTreeUnitCount(EventPlayer(), "SuWarLaboratory", c_techCountQueuedOrBetter) <= 1))) {
        Wait(1.8, c_timeGame);
        SoundPlayForPlayer(SoundLink("JUConstructionComplete2222", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
    }
    else if (((libNtve_gf_TriggeringProgressUnitType() == "SuSuperReactor") && (TechTreeUnitCount(EventPlayer(), "SuSuperReactor", c_techCountQueuedOrBetter) <= 1))) {
        Wait(1.8, c_timeGame);
        SoundPlayForPlayer(SoundLink("JUConstructionComplete2222", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
    }
    else if (((libNtve_gf_TriggeringProgressUnitType() == "SuCrane") && (TechTreeUnitCount(EventPlayer(), "SuCrane", c_techCountQueuedOrBetter) <= 1))) {
        Wait(1.8, c_timeGame);
        SoundPlayForPlayer(SoundLink("JUConstructionComplete2222", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libRED3_gt_NewConstrrctuionOptionsAvailable_Init () {
    libRED3_gt_NewConstrrctuionOptionsAvailable = TriggerCreate("libRED3_gt_NewConstrrctuionOptionsAvailable_Func");
    TriggerAddEventUnitConstructProgress(libRED3_gt_NewConstrrctuionOptionsAvailable, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Unit loss China
//--------------------------------------------------------------------------------------------------
bool libRED3_gt_UnitlossChina_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    SoundPlayForPlayer(SoundLink("unitlost14", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libRED3_gt_UnitlossChina_Init () {
    libRED3_gt_UnitlossChina = TriggerCreate("libRED3_gt_UnitlossChina_Func");
    TriggerAddEventPlayerEffectUsed(libRED3_gt_UnitlossChina, c_playerAny, "unitlost14");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Unit loss Allies
//--------------------------------------------------------------------------------------------------
bool libRED3_gt_UnitlossAllies_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    SoundPlayForPlayer(SoundLink("unitlost1", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libRED3_gt_UnitlossAllies_Init () {
    libRED3_gt_UnitlossAllies = TriggerCreate("libRED3_gt_UnitlossAllies_Func");
    TriggerAddEventPlayerEffectUsed(libRED3_gt_UnitlossAllies, c_playerAny, "unitlost1");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Unit loss Soviet
//--------------------------------------------------------------------------------------------------
bool libRED3_gt_UnitlossSoviet_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    SoundPlayForPlayer(SoundLink("unitlost12", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libRED3_gt_UnitlossSoviet_Init () {
    libRED3_gt_UnitlossSoviet = TriggerCreate("libRED3_gt_UnitlossSoviet_Func");
    TriggerAddEventPlayerEffectUsed(libRED3_gt_UnitlossSoviet, c_playerAny, "unitlost12");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Unit loss Empire
//--------------------------------------------------------------------------------------------------
bool libRED3_gt_UnitlossEmpire_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    SoundPlayForPlayer(SoundLink("unitlost13", -1), c_maxPlayers, PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libRED3_gt_UnitlossEmpire_Init () {
    libRED3_gt_UnitlossEmpire = TriggerCreate("libRED3_gt_UnitlossEmpire_Func");
    TriggerAddEventPlayerEffectUsed(libRED3_gt_UnitlossEmpire, c_playerAny, "unitlost13");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Allied Repair Panel Settings
//--------------------------------------------------------------------------------------------------
bool libRED3_gt_AlliedRepairPanelSettings_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto9BE208C8_g;
    int auto9BE208C8_var;

    // Actions
    if (!runActions) {
        return true;
    }

    auto9BE208C8_g = GameAttributePlayersForTeam(1);
    auto9BE208C8_var = -1;
    while (true) {
        auto9BE208C8_var = PlayerGroupNextPlayer(auto9BE208C8_g, auto9BE208C8_var);
        if (auto9BE208C8_var < 0) { break; }
        libNtve_gf_CreateUnitsAtPoint2(1, "AubuildDunmmyUnit323", 0, auto9BE208C8_var, RegionRandomPoint(RegionEntireMap()));
        DialogCreate(500, 550, c_anchorTop, 0, 0, true);
        libRED3_gv_maintenancePanel = DialogLastCreated();
        DialogSetVisible(DialogLastCreated(), PlayerGroupSingle(auto9BE208C8_var), true);
        DialogControlCreateFromTemplate(DialogLastCreated(), c_triggerControlTypeCommandPanel, "SuperWeaponUI/TerranGlobalCommandPanelTemplate");
        libRED3_gv_maintenancecommandpanel = DialogLastCreated();
        DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupSingle(auto9BE208C8_var), c_anchorTop, -250, -10);
        libNtve_gf_SetDialogItemUnitGroup(DialogControlLastCreated(), libNtve_gf_ConvertUnitToUnitGroup(UnitLastCreated()), PlayerGroupSingle(auto9BE208C8_var));
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupSingle(auto9BE208C8_var), true);
        DialogSetImageVisible(DialogLastCreated(), false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libRED3_gt_AlliedRepairPanelSettings_Init () {
    libRED3_gt_AlliedRepairPanelSettings = TriggerCreate("libRED3_gt_AlliedRepairPanelSettings_Func");
    TriggerEnable(libRED3_gt_AlliedRepairPanelSettings, false);
    TriggerAddEventTimeElapsed(libRED3_gt_AlliedRepairPanelSettings, 0.3, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Chaowu panel UI production
//--------------------------------------------------------------------------------------------------
bool libRED3_gt_ChaowupanelUIproduction_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((libNtve_gf_TriggeringProgressUnitType() == "SuVacuumImploder") || (libNtve_gf_TriggeringProgressUnitType() == "AuProtonCollider") || (libNtve_gf_TriggeringProgressUnitType() == "JpPsionicDecimator") || (libNtve_gf_TriggeringProgressUnitType() == "KorhalCannon223") || (libNtve_gf_TriggeringProgressUnitType() == "SuIronCurtain") || (libNtve_gf_TriggeringProgressUnitType() == "SuNuclearBombSilo") || (libNtve_gf_TriggeringProgressUnitType() == "AuChronoSphere") || (libNtve_gf_TriggeringProgressUnitType() == "AuOldChronosphere") || (libNtve_gf_TriggeringProgressUnitType() == "SuOldIronCurtain") || (libNtve_gf_TriggeringProgressUnitType() == "AuWeathercontroller") || (libNtve_gf_TriggeringProgressUnitType() == "JpNanoSwarm") || (libNtve_gf_TriggeringProgressUnitType() == "CnSundialarray") || (libNtve_gf_TriggeringProgressUnitType() == "CnDongfeng41launchsilo")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogCreate(87, 500, c_anchorTopLeft, 0, 0, true);
    libRED3_gv_chaowuPanel = DialogLastCreated();
    DialogSetVisible(DialogLastCreated(), PlayerGroupSingle(UnitGetOwner(EventUnitProgressUnit())), true);
    DialogControlCreateFromTemplate(DialogLastCreated(), c_triggerControlTypeCommandPanel, "SuperWeaponUI/TerranGlobalCommandPanelTemplate");
    libRED3_gv_chaowucommandpanel = DialogLastCreated();
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupSingle(UnitGetOwner(EventUnitProgressUnit())), c_anchorTopLeft, -155, 100);
    libNtve_gf_SetDialogItemUnitGroup(DialogControlLastCreated(), libNtve_gf_ConvertUnitToUnitGroup(EventUnitProgressUnit()), PlayerGroupSingle(UnitGetOwner(EventUnitProgressUnit())));
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupSingle(UnitGetOwner(EventUnitProgressUnit())), true);
    DialogSetImageVisible(DialogLastCreated(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libRED3_gt_ChaowupanelUIproduction_Init () {
    libRED3_gt_ChaowupanelUIproduction = TriggerCreate("libRED3_gt_ChaowupanelUIproduction_Func");
    TriggerAddEventUnitConstructProgress(libRED3_gt_ChaowupanelUIproduction, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Time and Space Teleportation Sticky
//--------------------------------------------------------------------------------------------------
bool libRED3_gt_TimeandSpaceTeleportationSticky_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreateUnitsWithDefaultFacing(1, "AuChronoTeleportationCoverUnit", 0, UnitGetOwner(EventUnit()), EventUnitTargetPoint());
    UnitGroupAdd(libRED3_gv_teleportationmarktarget, UnitLastCreated());
    UISetTargetingOrder(PlayerGroupSingle(UnitGetOwner(EventUnit())), libRED3_gv_teleportationmarktarget, OrderTargetingPoint(AbilityCommand("SuIronCurtain2", 0), EventUnitTargetPoint()), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libRED3_gt_TimeandSpaceTeleportationSticky_Init () {
    libRED3_gt_TimeandSpaceTeleportationSticky = TriggerCreate("libRED3_gt_TimeandSpaceTeleportationSticky_Func");
    TriggerAddEventUnitAbility(libRED3_gt_TimeandSpaceTeleportationSticky, null, AbilityCommand("SuIronCurtain222", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Clear the cover after teleportation
//--------------------------------------------------------------------------------------------------
bool libRED3_gt_Clearthecoverafterteleportation_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libRED3_gt_UnitlossAllies, false);
    UnitBehaviorAddPlayer(EventUnit(), "RAMovementSpeedAndArmor20Percent62", EventPlayer(), 1);
    Wait(1.0, c_timeGame);
    TriggerEnable(libRED3_gt_UnitlossAllies, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libRED3_gt_Clearthecoverafterteleportation_Init () {
    libRED3_gt_Clearthecoverafterteleportation = TriggerCreate("libRED3_gt_Clearthecoverafterteleportation_Func");
    TriggerAddEventUnitAbility(libRED3_gt_Clearthecoverafterteleportation, null, AbilityCommand("SuIronCurtain2", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Clear the cover after the teleportation is cancelled.
//--------------------------------------------------------------------------------------------------
bool libRED3_gt_Clearthecoveraftertheteleportationiscancelled_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto12B4A02B_g;
    int auto12B4A02B_u;
    unit auto12B4A02B_var;

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libRED3_gt_UnitlossAllies, false);
    auto12B4A02B_g = UnitGroup("AuChronoTeleportationCoverUnit", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto12B4A02B_u = UnitGroupCount(auto12B4A02B_g, c_unitCountAll);
    for (;; auto12B4A02B_u -= 1) {
        auto12B4A02B_var = UnitGroupUnitFromEnd(auto12B4A02B_g, auto12B4A02B_u);
        if (auto12B4A02B_var == null) { break; }
        UnitBehaviorAddPlayer(auto12B4A02B_var, "RAMovementSpeedAndArmor20Percent62", EventPlayer(), 1);
    }
    Wait(1.0, c_timeGame);
    TriggerEnable(libRED3_gt_UnitlossAllies, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libRED3_gt_Clearthecoveraftertheteleportationiscancelled_Init () {
    libRED3_gt_Clearthecoveraftertheteleportationiscancelled = TriggerCreate("libRED3_gt_Clearthecoveraftertheteleportationiscancelled_Func");
    TriggerAddEventTargetModeUpdate(libRED3_gt_Clearthecoveraftertheteleportationiscancelled, c_playerAny, AbilityCommand("SuIronCurtain2", 0), c_targetModeStateOff);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Synchronous hidden upgrade research completed
//--------------------------------------------------------------------------------------------------
bool libRED3_gt_Synchronoushiddenupgraderesearchcompleted_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((libNtve_gf_TriggeringProgressUpgrade() == "UnknownUpgrade20")) {
        TechTreeUpgradeAddLevel(EventPlayer(), "UnknownUpgrade202", 1);
    }

    if ((libNtve_gf_TriggeringProgressUpgrade() == "UnknownUpgrade16")) {
        TechTreeUpgradeAddLevel(EventPlayer(), "UnknownUpgrade162", 1);
    }

    if ((libNtve_gf_TriggeringProgressUpgrade() == "UnknownUpgrade24")) {
        TechTreeUpgradeAddLevel(EventPlayer(), "UnknownUpgrade242", 1);
        TechTreeUpgradeAddLevel(EventPlayer(), "UnknownUpgrade2422", 1);
    }

    if ((libNtve_gf_TriggeringProgressUpgrade() == "UnknownUpgrade13")) {
        TechTreeUpgradeAddLevel(EventPlayer(), "UnknownUpgrade132", 1);
    }

    if ((libNtve_gf_TriggeringProgressUpgrade() == "Fascist24222")) {
        TechTreeUpgradeAddLevel(EventPlayer(), "Fascist242223", 1);
    }

    if ((libNtve_gf_TriggeringProgressUpgrade() == "ZombieUpgrade3")) {
        TechTreeUpgradeAddLevel(EventPlayer(), "ZombieUpgrade33", 1);
    }

    if ((libNtve_gf_TriggeringProgressUpgrade() == "ZombieUpgrade35")) {
        TechTreeUpgradeAddLevel(EventPlayer(), "ZombieUpgrade333", 1);
    }

    if ((libNtve_gf_TriggeringProgressUpgrade() == "ZombieUpgrade37")) {
        TechTreeUpgradeAddLevel(EventPlayer(), "ZombieUpgrade335", 1);
        TechTreeUpgradeAddLevel(EventPlayer(), "UnknownUpgrade1024", 1);
        TechTreeUpgradeAddLevel(EventPlayer(), "UnknownUpgrade1023", 1);
    }

    if ((libNtve_gf_TriggeringProgressUpgrade() == "ZombieUpgrade36")) {
        TechTreeUpgradeAddLevel(EventPlayer(), "ZombieUpgrade334", 1);
    }

    if ((libNtve_gf_TriggeringProgressUpgrade() == "ZombieUpgrade32")) {
        TechTreeUpgradeAddLevel(EventPlayer(), "ZombieUpgrade323", 1);
    }

    if ((libNtve_gf_TriggeringProgressUpgrade() == "ZombieUpgrade324")) {
        TechTreeUpgradeAddLevel(EventPlayer(), "ZombieUpgrade3232", 1);
    }

    if ((libNtve_gf_TriggeringProgressUpgrade() == "ZombieUpgrade326")) {
        TechTreeUpgradeAddLevel(EventPlayer(), "ZombieUpgrade3234", 1);
        TechTreeUpgradeAddLevel(EventPlayer(), "ZombieUpgrade322224", 1);
        TechTreeUpgradeAddLevel(EventPlayer(), "ZombieUpgrade322223", 1);
    }

    if ((libNtve_gf_TriggeringProgressUpgrade() == "ZombieUpgrade325")) {
        TechTreeUpgradeAddLevel(EventPlayer(), "ZombieUpgrade3233", 1);
    }

    if ((libNtve_gf_TriggeringProgressUpgrade() == "TechnologySpecializedInfantry233")) {
        TechTreeUpgradeAddLevel(EventPlayer(), "TechnologySpecializedInfantry2332", 1);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libRED3_gt_Synchronoushiddenupgraderesearchcompleted_Init () {
    libRED3_gt_Synchronoushiddenupgraderesearchcompleted = TriggerCreate("libRED3_gt_Synchronoushiddenupgraderesearchcompleted_Func");
    TriggerAddEventUnitResearchProgress(libRED3_gt_Synchronoushiddenupgraderesearchcompleted, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Enemies are reduced in size
//--------------------------------------------------------------------------------------------------
bool libRED3_gt_Enemiesarereducedinsize_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetScale(EventUnit(), 65.0, 65.0, 65.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libRED3_gt_Enemiesarereducedinsize_Init () {
    libRED3_gt_Enemiesarereducedinsize = TriggerCreate("libRED3_gt_Enemiesarereducedinsize_Func");
    TriggerAddEventUnitBehaviorChange(libRED3_gt_Enemiesarereducedinsize, null, "RAMovementSpeedAndArmor20Percent452", c_unitBehaviorChangeIncrease);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Enemies are restored after being reduced in size
//--------------------------------------------------------------------------------------------------
bool libRED3_gt_Enemiesarerestoredafterbeingreducedinsize_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetScale(EventUnit(), 100.0, 100.0, 100.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libRED3_gt_Enemiesarerestoredafterbeingreducedinsize_Init () {
    libRED3_gt_Enemiesarerestoredafterbeingreducedinsize = TriggerCreate("libRED3_gt_Enemiesarerestoredafterbeingreducedinsize_Func");
    TriggerAddEventUnitBehaviorChange(libRED3_gt_Enemiesarerestoredafterbeingreducedinsize, null, "RAMovementSpeedAndArmor20Percent452", c_unitBehaviorChangeDecrease);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Maintenance bee height adjustment
//--------------------------------------------------------------------------------------------------
bool libRED3_gt_Maintenancebeeheightadjustment_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventPlayerEffectUsedUnit(c_effectUnitCaster)) == "AlliedRepairBee"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetHeight(EventPlayerEffectUsedUnit(c_effectUnitCaster), (UnitGetHeight(EventPlayerEffectUsedUnitImpact()) + 0.6), 1.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libRED3_gt_Maintenancebeeheightadjustment_Init () {
    libRED3_gt_Maintenancebeeheightadjustment = TriggerCreate("libRED3_gt_Maintenancebeeheightadjustment_Func");
    TriggerAddEventPlayerEffectUsed(libRED3_gt_Maintenancebeeheightadjustment, c_playerAny, "Repair3");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Maintenance bee height restored
//--------------------------------------------------------------------------------------------------
bool libRED3_gt_Maintenancebeeheightrestored_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetHeight(EventPlayerEffectUsedUnitImpact(), 3.75, 1.5);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libRED3_gt_Maintenancebeeheightrestored_Init () {
    libRED3_gt_Maintenancebeeheightrestored = TriggerCreate("libRED3_gt_Maintenancebeeheightrestored_Func");
    TriggerAddEventPlayerEffectUsed(libRED3_gt_Maintenancebeeheightrestored, c_playerAny, "AurepairDroneHighstart2");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Select airport
//--------------------------------------------------------------------------------------------------
bool libRED3_gt_Selectairport_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupSelect(UnitGroup("AuAirport", EventPlayer(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), EventPlayer(), true);
    UnitGroupSelect(UnitGroup("SuAirport", EventPlayer(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), EventPlayer(), true);
    UnitGroupSelect(UnitGroup("CnAirport", EventPlayer(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), EventPlayer(), true);
    UnitSelect(EventUnit(), EventPlayer(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libRED3_gt_Selectairport_Init () {
    libRED3_gt_Selectairport = TriggerCreate("libRED3_gt_Selectairport_Func");
    TriggerAddEventUnitAbility(libRED3_gt_Selectairport, null, AbilityCommand("RAChooseAirForce", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Select all tank factories
//--------------------------------------------------------------------------------------------------
bool libRED3_gt_Selectalltankfactories_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupSelect(UnitGroup("JpWarFactory", EventPlayer(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), EventPlayer(), true);
    UnitGroupSelect(UnitGroup("JpMechFactory", EventPlayer(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), EventPlayer(), true);
    UnitGroupSelect(UnitGroup("AuWarFactory", EventPlayer(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), EventPlayer(), true);
    UnitGroupSelect(UnitGroup("AuOldFactory", EventPlayer(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), EventPlayer(), true);
    UnitGroupSelect(UnitGroup("NukeSiloNova", EventPlayer(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), EventPlayer(), true);
    UnitGroupSelect(UnitGroup("SuRussiamArtilleryFactory", EventPlayer(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), EventPlayer(), true);
    UnitGroupSelect(UnitGroup("CnHeavyArmorWorkshop", EventPlayer(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), EventPlayer(), true);
    UnitGroupSelect(UnitGroup("CnWarFactory", EventPlayer(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), EventPlayer(), true);
    UnitGroupSelect(UnitGroup("SuArtilleryFactory", EventPlayer(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), EventPlayer(), true);
    UnitGroupSelect(UnitGroup("AuArtilleryFactory", EventPlayer(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), EventPlayer(), true);
    UnitGroupSelect(UnitGroup("SuHeavyArtilleryFactory", EventPlayer(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), EventPlayer(), true);
    UnitGroupSelect(UnitGroup("SuMechaFactory", EventPlayer(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), EventPlayer(), true);
    UnitSelect(EventUnit(), EventPlayer(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libRED3_gt_Selectalltankfactories_Init () {
    libRED3_gt_Selectalltankfactories = TriggerCreate("libRED3_gt_Selectalltankfactories_Func");
    TriggerAddEventUnitAbility(libRED3_gt_Selectalltankfactories, null, AbilityCommand("RASelectFactory", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Select all barracks
//--------------------------------------------------------------------------------------------------
bool libRED3_gt_Selectallbarracks_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupSelect(UnitGroup("JpBarracks", EventPlayer(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), EventPlayer(), true);
    UnitGroupSelect(UnitGroup("AuBarrack", EventPlayer(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), EventPlayer(), true);
    UnitGroupSelect(UnitGroup("SuBarracks", EventPlayer(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), EventPlayer(), true);
    UnitGroupSelect(UnitGroup("CnBarracks", EventPlayer(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), EventPlayer(), true);
    UnitSelect(EventUnit(), EventPlayer(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libRED3_gt_Selectallbarracks_Init () {
    libRED3_gt_Selectallbarracks = TriggerCreate("libRED3_gt_Selectallbarracks_Func");
    TriggerAddEventUnitAbility(libRED3_gt_Selectallbarracks, null, AbilityCommand("SelectShipyards", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Active skill: Lightning Storm! 2
//--------------------------------------------------------------------------------------------------
bool libRED3_gt_ActiveskillLightningStorm2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextWithColor(StringToText(""), Color(0.00, 50.20, 100.00)));
    Wait(7.0, c_timeGame);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextWithColor(StringToText(""), Color(0.00, 100.00, 100.00)));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libRED3_gt_ActiveskillLightningStorm2_Init () {
    libRED3_gt_ActiveskillLightningStorm2 = TriggerCreate("libRED3_gt_ActiveskillLightningStorm2_Func");
    TriggerAddEventUnitAbility(libRED3_gt_ActiveskillLightningStorm2, null, AbilityCommand("OdinNuclearStrike222233", 0), c_unitAbilStageExecute, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Active skill: Law-knowing special skill
//--------------------------------------------------------------------------------------------------
bool libRED3_gt_ActiveskillLawknowingspecialskill_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    GameSetLighting("TTosh01Eruption", 0.5);
    TriggerEnable(TriggerGetCurrent(), false);
    Wait(7.0, c_timeGame);
    GameSetLighting("BattleStation", 0.7);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libRED3_gt_ActiveskillLawknowingspecialskill_Init () {
    libRED3_gt_ActiveskillLawknowingspecialskill = TriggerCreate("libRED3_gt_ActiveskillLawknowingspecialskill_Func");
    TriggerAddEventUnitAbility(libRED3_gt_ActiveskillLawknowingspecialskill, null, AbilityCommand("Herrscher3rdInstant2", 0), c_unitAbilStageExecute, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Pioneer mobile reset cd
//--------------------------------------------------------------------------------------------------
bool libRED3_gt_Pioneermobileresetcd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_attackingunit;
    fixed lv_angle;
    point lv_centerpoint;
    point lv_movetargetpoint;
    fixed lv_angledifference;
    fixed lv_timerequired;
    int lv_requirednumberoftimes;
    bool lv_isitleft;
    fixed lv_approximatearcdistance;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!(((UnitGetType(EventUnit()) == "AuHarberGunship") || (UnitGetType(EventUnit()) == "AlliedVindicator") || (UnitGetType(EventUnit()) == "AlliedCenturyBomber")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_attackingunit = EventUnit();
    lv_angledifference = libRED3_gf_Angledifferencebetweenunitandtargetpoint(lv_attackingunit, EventUnitTargetPoint());
    if ((lv_angledifference > 45.0)) {
        UnitBehaviorAdd(lv_attackingunit, "ydsjnbnsyydjn", lv_attackingunit, 1);
        UnitBehaviorSetDuration(lv_attackingunit, "ydsjnbnsyydjn", 0.5);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libRED3_gt_Pioneermobileresetcd_Init () {
    libRED3_gt_Pioneermobileresetcd = TriggerCreate("libRED3_gt_Pioneermobileresetcd_Func");
    TriggerAddEventUnitAbility(libRED3_gt_Pioneermobileresetcd, null, AbilityCommand("move22", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Vanguard Attack Surround
//--------------------------------------------------------------------------------------------------
bool libRED3_gt_VanguardAttackSurround_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_attackingunit;
    unit lv_attackedunit;
    point lv_movetargetpoint;
    fixed lv_angle;
    point lv_centerpoint;
    int lv_numberofdelays;

    // Automatic Variable Declarations
    const int autoE5F7141F_n = 80;
    int autoE5F7141F_i;
    int auto6E4446A1_n;
    int auto6E4446A1_i;

    // Variable Initialization
    lv_numberofdelays = 80;

    // Conditions
    if (testConds) {
        if (!((UnitBehaviorCount(EventPlayerEffectUsedUnit(c_effectUnitCaster), "ydsjnbnsyydjn") == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_attackingunit = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_attackedunit = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    lv_attackingunit = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_angle = AngleBetweenPoints(UnitGetPosition(lv_attackingunit), UnitGetPosition(lv_attackedunit));
    lv_centerpoint = PointWithOffsetPolar(UnitGetPosition(lv_attackingunit), 0.1, lv_angle);
    Wait(0.1, c_timeGame);
    for (autoE5F7141F_i = 1; autoE5F7141F_i <= autoE5F7141F_n; autoE5F7141F_i += 1) {
        if (((UnitIsAlive(lv_attackingunit) == true) && (UnitIsAlive(lv_attackedunit) == true) && (UnitBehaviorCount(lv_attackingunit, "xfjytzzdpx2") == 0))) {
            lv_numberofdelays -= 1;
            lv_angle = AngleBetweenPoints(UnitGetPosition(lv_attackingunit), UnitGetPosition(lv_attackedunit));
            UnitBehaviorAdd(lv_attackingunit, "xfjytzzdpx", lv_attackingunit, 1);
            UnitBehaviorSetDuration(lv_attackingunit, "xfjytzzdpx", 0.125);
            lv_movetargetpoint = libRED3_gf_SurroundAttackAcquisitionPoint(lv_attackingunit, UnitGetPosition(lv_attackedunit));
            libRED3_gf_Continuemovingtotargetpoint(lv_attackingunit, lv_movetargetpoint, 0.2);
            Wait(0.0625, c_timeGame);
        }
        else {
            if (((UnitIsAlive(lv_attackingunit) == true) && (UnitIsAlive(lv_attackedunit) == false) && (UnitBehaviorCount(lv_attackingunit, "xfjytzzdpx2") == 0))) {
                lv_centerpoint = PointWithOffsetPolar(UnitGetPosition(lv_attackingunit), 6.0, lv_angle);
                lv_numberofdelays -= 3;
                auto6E4446A1_n = lv_numberofdelays;
                for (auto6E4446A1_i = 1; auto6E4446A1_i <= auto6E4446A1_n; auto6E4446A1_i += 1) {
                    if ((UnitBehaviorCount(lv_attackingunit, "xfjytzzdpx2") == 0)) {
                        libRED3_gf_Cruiseoncewhendestroyingatarget(lv_attackingunit, lv_centerpoint);
                        Wait(0.0625, c_timeGame);
                    }
                    else {
                        break;
                    }
                }
                break;
            }
            else {
                UnitBehaviorRemove(lv_attackingunit, "xfjytzzdpx", 1);
                break;
            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libRED3_gt_VanguardAttackSurround_Init () {
    libRED3_gt_VanguardAttackSurround = TriggerCreate("libRED3_gt_VanguardAttackSurround_Func");
    TriggerAddEventPlayerEffectUsed(libRED3_gt_VanguardAttackSurround, c_playerAny, "xfwrmjxg");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Pioneer automatically circles new when stopped
//--------------------------------------------------------------------------------------------------
bool libRED3_gt_Pioneerautomaticallycirclesnewwhenstopped_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_attackunit;
    fixed lv_angle;
    point lv_centerpoint;
    point lv_movingtargetpoint;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!(((UnitGetType(EventPlayerEffectUsedUnit(c_effectUnitCaster)) == "AuHarberGunship") && (UnitBehaviorCount(EventPlayerEffectUsedUnit(c_effectUnitCaster), "xfjytzzdpx2") == 0) && (UnitBehaviorCount(EventPlayerEffectUsedUnit(c_effectUnitCaster), "xfjytzzdpx") == 0)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_attackunit = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_angle = (UnitGetFacing(lv_attackunit) - 150.0);
    lv_centerpoint = PointWithOffsetPolar(UnitGetPosition(lv_attackunit), 0.1, lv_angle);
    while (true) {
        if (((UnitIsAlive(lv_attackunit) == true) && (UnitBehaviorCount(EventPlayerEffectUsedUnit(c_effectUnitCaster), "xfjytzzdpx2") == 0) && (UnitBehaviorCount(EventPlayerEffectUsedUnit(c_effectUnitCaster), "xfjytzzdpx22") == 0) && (UnitBehaviorCount(EventPlayerEffectUsedUnit(c_effectUnitCaster), "xfjytzzdpx223") == 0) && (UnitBehaviorCount(lv_attackunit, "xfjytzzdpx22") == 0))) {
            libRED3_gf_Cruiseoncewhilestopped(lv_attackunit, lv_centerpoint);
            Wait(0.0625, c_timeGame);
        }
        else {
            break;
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libRED3_gt_Pioneerautomaticallycirclesnewwhenstopped_Init () {
    libRED3_gt_Pioneerautomaticallycirclesnewwhenstopped = TriggerCreate("libRED3_gt_Pioneerautomaticallycirclesnewwhenstopped_Func");
    TriggerAddEventPlayerEffectUsed(libRED3_gt_Pioneerautomaticallycirclesnewwhenstopped, c_playerAny, "xfwrmjxg2");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Aircraft manufacturing completed
//--------------------------------------------------------------------------------------------------
bool libRED3_gt_Aircraftmanufacturingcompleted_Func (bool testConds, bool runActions) {
    int init_i;

    // Variable Declarations
    unit lv_airport;
    unit lv_airplane;
    point lv_landingpoint;
    point lv_lowerlandingpoint;
    point lv_upperlandingpoint;
    fixed lv_angledifference;
    fixed lv_turningtime;
    int lv_aircraftheading;
    string lv_airportcustomvaluestringtotal;
    string[5] lv_airportcustomvaluestringgroup;
    int lv_useslot;
    unitgroup lv_airportunitgroup;

    // Automatic Variable Declarations
    unitgroup autoF37A3B47_g;
    int autoF37A3B47_u;
    unit autoF37A3B47_var;
    unitgroup auto1D10B338_g;
    int auto1D10B338_u;
    unit auto1D10B338_var;
    unitgroup auto85F99D57_g;
    int auto85F99D57_u;
    unit auto85F99D57_var;

    // Variable Initialization
    lv_airportcustomvaluestringtotal = "";
    for (init_i = 0; init_i <= 4; init_i += 1) {
        lv_airportcustomvaluestringgroup[init_i] = "";
    }
    lv_airportunitgroup = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!(((UnitGetType(EventUnitProgressUnit()) == "AlliedVindicator") || (UnitGetType(EventUnitProgressUnit()) == "AlliedCenturyBomber") || (UnitGetType(EventUnitProgressUnit()) == "AuAirport")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if (((UnitGetType(EventUnitProgressUnit()) == "AlliedVindicator") || (UnitGetType(EventUnitProgressUnit()) == "AlliedCenturyBomber"))) {
        lv_airplane = EventUnitProgressUnit();
        lv_airport = EventUnit();
        UnitBehaviorAdd(lv_airplane, "jcfjjl", lv_airplane, 1);
        if ((UnitGetCustomValue(lv_airport, libRED3_gv_airportcustomvalue) == 0.0)) {
            UnitSetCustomValue(lv_airport, libRED3_gv_airportcustomvalue, 1111.0);
        }

        if ((UnitGetCustomValue(lv_airport, libRED3_gv_airportcustomvalue) == 2222.0)) {
            autoF37A3B47_g = UnitGroup("AuAirport", EventPlayer(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            autoF37A3B47_u = UnitGroupCount(autoF37A3B47_g, c_unitCountAll);
            for (;; autoF37A3B47_u -= 1) {
                autoF37A3B47_var = UnitGroupUnitFromEnd(autoF37A3B47_g, autoF37A3B47_u);
                if (autoF37A3B47_var == null) { break; }
                if ((UnitGetCustomValue(autoF37A3B47_var, libRED3_gv_airportcustomvalue) != 2222.0)) {
                    UnitGroupAdd(lv_airportunitgroup, autoF37A3B47_var);
                }

            }
            auto1D10B338_g = UnitGroup("SuAirport", EventPlayer(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            auto1D10B338_u = UnitGroupCount(auto1D10B338_g, c_unitCountAll);
            for (;; auto1D10B338_u -= 1) {
                auto1D10B338_var = UnitGroupUnitFromEnd(auto1D10B338_g, auto1D10B338_u);
                if (auto1D10B338_var == null) { break; }
                if ((UnitGetCustomValue(auto1D10B338_var, libRED3_gv_airportcustomvalue) != 2222.0)) {
                    UnitGroupAdd(lv_airportunitgroup, auto1D10B338_var);
                }

            }
            auto85F99D57_g = UnitGroup("CnAirport", EventPlayer(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            auto85F99D57_u = UnitGroupCount(auto85F99D57_g, c_unitCountAll);
            for (;; auto85F99D57_u -= 1) {
                auto85F99D57_var = UnitGroupUnitFromEnd(auto85F99D57_g, auto85F99D57_u);
                if (auto85F99D57_var == null) { break; }
                if ((UnitGetCustomValue(auto85F99D57_var, libRED3_gv_airportcustomvalue) != 2222.0)) {
                    UnitGroupAdd(lv_airportunitgroup, auto85F99D57_var);
                }

            }
            lv_airport = UnitGroupClosestToPoint(lv_airportunitgroup, UnitGetPosition(EventUnit()));
            if ((UnitGetCustomValue(lv_airport, libRED3_gv_airportcustomvalue) == 0.0)) {
                UnitSetCustomValue(lv_airport, libRED3_gv_airportcustomvalue, 1111.0);
            }

        }

        libRED3_gf_Loadingtheairfieldwithfighterjets(lv_airport, lv_airplane);
    }
    else {
        if ((UnitGetCustomValue(lv_airport, libRED3_gv_airportcustomvalue) == 0.0)) {
            UnitSetCustomValue(lv_airport, libRED3_gv_airportcustomvalue, 1111.0);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libRED3_gt_Aircraftmanufacturingcompleted_Init () {
    libRED3_gt_Aircraftmanufacturingcompleted = TriggerCreate("libRED3_gt_Aircraftmanufacturingcompleted_Func");
    TriggerAddEventUnitTrainProgress(libRED3_gt_Aircraftmanufacturingcompleted, null, c_unitProgressStageComplete);
    TriggerAddEventUnitConstructProgress(libRED3_gt_Aircraftmanufacturingcompleted, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Allied airfield landing
//--------------------------------------------------------------------------------------------------
bool libRED3_gt_Alliedairfieldlanding_Func (bool testConds, bool runActions) {
    int init_i;

    // Variable Declarations
    unit lv_airport;
    unit lv_airplane;
    point lv_landingpoint;
    point lv_lowerlandingpoint;
    point lv_upperlandingpoint;
    fixed lv_angledifference;
    fixed lv_turningtime;
    int lv_aircraftheading;
    string lv_airportcustomvaluestringtotal;
    string[5] lv_airportcustomvaluestringgroup;
    int lv_useslot;

    // Automatic Variable Declarations
    const int auto00C3DF63_ae = 4;
    int auto00C3DF63_var;
    const int autoC87504CD_ae = 4;
    int autoC87504CD_var;
    int autoF9F52362_val;
    int auto5C3C0FF1_val;
    string autoB21399C5_val;

    // Variable Initialization
    lv_airportcustomvaluestringtotal = "";
    for (init_i = 0; init_i <= 4; init_i += 1) {
        lv_airportcustomvaluestringgroup[init_i] = "";
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_airplane = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_airport = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    if ((UnitGetCustomValue(lv_airport, libRED3_gv_airportcustomvalue) == 0.0)) {
        UnitSetCustomValue(lv_airport, libRED3_gv_airportcustomvalue, 1111.0);
    }

    lv_airportcustomvaluestringtotal = IntToString(FixedToInt(UnitGetCustomValue(lv_airport, libRED3_gv_airportcustomvalue)));
    auto00C3DF63_var = 1;
    for ( ; auto00C3DF63_var <= auto00C3DF63_ae; auto00C3DF63_var += 1 ) {
        lv_airportcustomvaluestringgroup[auto00C3DF63_var] = StringSub(lv_airportcustomvaluestringtotal, auto00C3DF63_var, auto00C3DF63_var);
    }
    autoC87504CD_var = 1;
    for ( ; autoC87504CD_var <= autoC87504CD_ae; autoC87504CD_var += 1 ) {
        if ((lv_airportcustomvaluestringgroup[autoC87504CD_var] == "1")) {
            lv_useslot = autoC87504CD_var;
            UnitSetCustomValue(lv_airplane, libRED3_gv_aircraftcustomvalue, autoC87504CD_var);
            UnitBehaviorAdd(lv_airplane, "yfpcw", lv_airport, 1);
            lv_airportcustomvaluestringgroup[autoC87504CD_var] = "2";
            lv_airportcustomvaluestringtotal = (lv_airportcustomvaluestringgroup[1] + lv_airportcustomvaluestringgroup[2] + lv_airportcustomvaluestringgroup[3] + lv_airportcustomvaluestringgroup[4]);
            UnitSetCustomValue(lv_airport, libRED3_gv_airportcustomvalue, StringToFixed(lv_airportcustomvaluestringtotal));
            break;
        }

    }
    lv_upperlandingpoint = PointWithOffsetPolar(UnitGetPosition(lv_airport), -1.1, UnitGetFacing(lv_airport));
    lv_lowerlandingpoint = PointWithOffsetPolar(UnitGetPosition(lv_airport), 0.7, UnitGetFacing(lv_airport));
    autoF9F52362_val = lv_useslot;
    if (autoF9F52362_val == 1) {
        lv_landingpoint = PointWithOffsetPolar(lv_lowerlandingpoint, 1.7, (UnitGetFacing(lv_airport) + 90.0));
        lv_aircraftheading = 160;
    }
    else if (autoF9F52362_val == 2) {
        lv_landingpoint = PointWithOffsetPolar(lv_upperlandingpoint, 1.7, (UnitGetFacing(lv_airport) + 90.0));
        lv_aircraftheading = 160;
    }
    else if (autoF9F52362_val == 3) {
        lv_landingpoint = PointWithOffsetPolar(lv_lowerlandingpoint, 1.7, (UnitGetFacing(lv_airport) - 90.0));
        lv_aircraftheading = 340;
    }
    else if (autoF9F52362_val == 4) {
        lv_landingpoint = PointWithOffsetPolar(lv_upperlandingpoint, 1.7, (UnitGetFacing(lv_airport) - 90.0));
        lv_aircraftheading = 340;
    }
    else {
    }
    UnitIssueOrder(lv_airplane, OrderTargetingPoint(AbilityCommand("move22", 0), lv_landingpoint), c_orderQueueReplace);
    UnitIssueOrder(lv_airplane, OrderTargetingPoint(AbilityCommand("move22", 0), lv_landingpoint), c_orderQueueReplace);
    UnitIssueOrder(lv_airplane, OrderTargetingPoint(AbilityCommand("move22", 0), lv_landingpoint), c_orderQueueReplace);
    while (!(((UnitIsAlive(lv_airplane) == false) || (UnitIsAlive(lv_airport) == false) || (DistanceBetweenPoints(UnitGetPosition(lv_airplane), lv_landingpoint) < 1.0)))) {
        Wait(0.5, c_timeGame);
    }
    if (((UnitIsAlive(lv_airplane) == false) || (UnitIsAlive(lv_airport) == false))) {
        UnitBehaviorRemove(lv_airplane, "ydsjnjzpx", 1);
        libRED3_gf_Restoreairportslotsbasedonaircraftcustomvalues(lv_airplane, lv_airport);

    }
    else {
        auto5C3C0FF1_val = lv_useslot;
        if (auto5C3C0FF1_val == 1) {
            libNtve_gf_SendActorMessageToUnit(lv_airport, "AnimBracketStart A Stand,Work,Start,A Stand,Work,A Stand,Work,End,A FullMatch");
        }
        else if (auto5C3C0FF1_val == 2) {
            libNtve_gf_SendActorMessageToUnit(lv_airport, "AnimBracketStart B Stand,Work,Start,B Stand,Work,B Stand,Work,End,B FullMatch");
        }
        else if (auto5C3C0FF1_val == 3) {
            libNtve_gf_SendActorMessageToUnit(lv_airport, "AnimBracketStart C Stand,Work,Start,C Stand,Work,C Stand,Work,End,C FullMatch");
        }
        else if (auto5C3C0FF1_val == 4) {
            libNtve_gf_SendActorMessageToUnit(lv_airport, "AnimBracketStart D Stand,Work,Start,D Stand,Work,D Stand,Work,End,D FullMatch");
        }
        else {
        }
        Wait(0.5, c_timeGame);
        if ((UnitIsAlive(lv_airplane) == true) && (UnitIsAlive(lv_airport) == true)) {
            lv_angledifference = libRED3_gf_Angledifferencebetweenunitandtargetpoint(lv_airplane, PointWithOffsetPolar(lv_landingpoint, 1.0, lv_aircraftheading));
            lv_turningtime = (lv_angledifference / UnitGetPropertyFixed(lv_airplane, c_unitPropTurnRate, c_unitPropCurrent));
            if ((lv_turningtime >= 1)) {
                lv_turningtime = 1.0;
            }

            UnitSetFacing(lv_airplane, lv_aircraftheading, lv_turningtime);
        }
        else {
            UnitBehaviorRemove(lv_airplane, "ydsjnjzpx", 1);
            libRED3_gf_Restoreairportslotsbasedonaircraftcustomvalues(lv_airplane, lv_airport);

        }
        Wait(lv_turningtime, c_timeGame);
        if ((UnitIsAlive(lv_airplane) == true) && (UnitIsAlive(lv_airport) == true)) {
            UnitBehaviorAdd(lv_airplane, "jzsyqf", lv_airplane, 1);
            autoB21399C5_val = UnitGetType(lv_airplane);
            if (autoB21399C5_val == "AlliedCenturyBomber") {
                UnitSetHeight(lv_airplane, 0.1, 1.6);
                UnitBehaviorSetDuration(lv_airplane, "jzsyqf", 1.6);
            }
            else {
                UnitSetHeight(lv_airplane, 0.1, 0.75);
                UnitBehaviorSetDuration(lv_airplane, "jzsyqf", 0.75);
            }
            UnitBehaviorAdd(lv_airplane, "jcfjjl", lv_airplane, 1);
            UnitBehaviorAdd(lv_airplane, "fjfxjkjc", lv_airplane, 1);
            UnitCreateEffectUnit(lv_airport, "jfjzzzjc3", lv_airplane);
            UnitBehaviorAdd(lv_airplane, "yfpcw2", lv_airplane, 1);
            UnitBehaviorRemove(lv_airplane, "yfpcw", 1);
        }
        else {
            UnitBehaviorRemove(lv_airplane, "ydsjnjzpx", 1);
            libRED3_gf_Restoreairportslotsbasedonaircraftcustomvalues(lv_airplane, lv_airport);

        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libRED3_gt_Alliedairfieldlanding_Init () {
    libRED3_gt_Alliedairfieldlanding = TriggerCreate("libRED3_gt_Alliedairfieldlanding_Func");
    TriggerAddEventPlayerEffectUsed(libRED3_gt_Alliedairfieldlanding, c_playerAny, "jfjzzzmjjcjh");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Landing at Soviet airport
//--------------------------------------------------------------------------------------------------
bool libRED3_gt_LandingatSovietairport_Func (bool testConds, bool runActions) {
    int init_i;

    // Variable Declarations
    unit lv_airport;
    unit lv_airplane;
    point lv_landingpoint;
    point lv_lowerlandingpoint;
    point lv_upperlandingpoint;
    fixed lv_angledifference;
    fixed lv_turningtime;
    int lv_aircraftheading;
    string lv_airportcustomvaluestringtotal;
    string[5] lv_airportcustomvaluestringgroup;
    int lv_useslot;

    // Automatic Variable Declarations
    const int auto092BE1BF_ae = 4;
    int auto092BE1BF_var;
    const int autoE78577BA_ae = 4;
    int autoE78577BA_var;
    int auto4C767FCB_val;
    int auto4399043F_val;
    string auto5606D566_val;

    // Variable Initialization
    lv_airportcustomvaluestringtotal = "";
    for (init_i = 0; init_i <= 4; init_i += 1) {
        lv_airportcustomvaluestringgroup[init_i] = "";
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_airplane = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_airport = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    if ((UnitGetCustomValue(lv_airport, libRED3_gv_airportcustomvalue) == 0.0)) {
        UnitSetCustomValue(lv_airport, libRED3_gv_airportcustomvalue, 1111.0);
    }

    lv_airportcustomvaluestringtotal = IntToString(FixedToInt(UnitGetCustomValue(lv_airport, libRED3_gv_airportcustomvalue)));
    auto092BE1BF_var = 1;
    for ( ; auto092BE1BF_var <= auto092BE1BF_ae; auto092BE1BF_var += 1 ) {
        lv_airportcustomvaluestringgroup[auto092BE1BF_var] = StringSub(lv_airportcustomvaluestringtotal, auto092BE1BF_var, auto092BE1BF_var);
    }
    autoE78577BA_var = 1;
    for ( ; autoE78577BA_var <= autoE78577BA_ae; autoE78577BA_var += 1 ) {
        if ((lv_airportcustomvaluestringgroup[autoE78577BA_var] == "1")) {
            lv_useslot = autoE78577BA_var;
            UnitSetCustomValue(lv_airplane, libRED3_gv_aircraftcustomvalue, autoE78577BA_var);
            UnitBehaviorAdd(lv_airplane, "yfpcw", lv_airport, 1);
            lv_airportcustomvaluestringgroup[autoE78577BA_var] = "2";
            lv_airportcustomvaluestringtotal = (lv_airportcustomvaluestringgroup[1] + lv_airportcustomvaluestringgroup[2] + lv_airportcustomvaluestringgroup[3] + lv_airportcustomvaluestringgroup[4]);
            UnitSetCustomValue(lv_airport, libRED3_gv_airportcustomvalue, StringToFixed(lv_airportcustomvaluestringtotal));
            break;
        }

    }
    lv_upperlandingpoint = PointWithOffsetPolar(UnitGetPosition(lv_airport), -1.0, UnitGetFacing(lv_airport));
    lv_lowerlandingpoint = PointWithOffsetPolar(UnitGetPosition(lv_airport), 1.0, UnitGetFacing(lv_airport));
    auto4C767FCB_val = lv_useslot;
    if (auto4C767FCB_val == 1) {
        lv_landingpoint = PointWithOffsetPolar(lv_lowerlandingpoint, 2.3, (UnitGetFacing(lv_airport) + 90.0));
        lv_aircraftheading = 315;
    }
    else if (auto4C767FCB_val == 2) {
        lv_landingpoint = PointWithOffsetPolar(lv_lowerlandingpoint, 2.3, (UnitGetFacing(lv_airport) - 90.0));
        lv_aircraftheading = 135;
    }
    else if (auto4C767FCB_val == 3) {
        lv_landingpoint = PointWithOffsetPolar(lv_upperlandingpoint, 2.3, (UnitGetFacing(lv_airport) - 90.0));
        lv_aircraftheading = 135;
    }
    else if (auto4C767FCB_val == 4) {
        lv_landingpoint = PointWithOffsetPolar(lv_upperlandingpoint, 2.3, (UnitGetFacing(lv_airport) + 90.0));
        lv_aircraftheading = 315;
    }
    else {
    }
    UnitIssueOrder(lv_airplane, OrderTargetingPoint(AbilityCommand("move", 0), lv_landingpoint), c_orderQueueReplace);
    UnitIssueOrder(lv_airplane, OrderTargetingPoint(AbilityCommand("move2", 0), lv_landingpoint), c_orderQueueReplace);
    UnitIssueOrder(lv_airplane, OrderTargetingPoint(AbilityCommand("move22", 0), lv_landingpoint), c_orderQueueReplace);
    while (!(((UnitIsAlive(lv_airplane) == false) || (UnitIsAlive(lv_airport) == false) || (DistanceBetweenPoints(UnitGetPosition(lv_airplane), lv_landingpoint) < 0.5)))) {
        Wait(0.5, c_timeGame);
    }
    if (((UnitIsAlive(lv_airplane) == false) || (UnitIsAlive(lv_airport) == false))) {

    }
    else {
        auto4399043F_val = lv_useslot;
        if (auto4399043F_val == 1) {
            libNtve_gf_SendActorMessageToUnit(lv_airport, "AnimBracketStart A Stand,Work,Start,A Stand,Work,A Stand,Work,End,A FullMatch");
        }
        else if (auto4399043F_val == 2) {
            libNtve_gf_SendActorMessageToUnit(lv_airport, "AnimBracketStart B Stand,Work,Start,B Stand,Work,B Stand,Work,End,B FullMatch");
        }
        else if (auto4399043F_val == 3) {
            libNtve_gf_SendActorMessageToUnit(lv_airport, "AnimBracketStart C Stand,Work,Start,C Stand,Work,C Stand,Work,End,C FullMatch");
        }
        else if (auto4399043F_val == 4) {
            libNtve_gf_SendActorMessageToUnit(lv_airport, "AnimBracketStart D Stand,Work,Start,D Stand,Work,D Stand,Work,End,D FullMatch");
        }
        else {
        }
        Wait(0.5, c_timeGame);
        if ((UnitIsAlive(lv_airplane) == true) && (UnitIsAlive(lv_airport) == true)) {
            lv_angledifference = libRED3_gf_Angledifferencebetweenunitandtargetpoint(lv_airplane, PointWithOffsetPolar(lv_landingpoint, 1.0, lv_aircraftheading));
            lv_turningtime = (lv_angledifference / UnitGetPropertyFixed(lv_airplane, c_unitPropTurnRate, c_unitPropCurrent));
            if ((lv_turningtime >= 1)) {
                lv_turningtime = 1.0;
            }

            UnitSetFacing(lv_airplane, lv_aircraftheading, lv_turningtime);
        }
        else {
            UnitBehaviorRemove(lv_airplane, "ydsjnjzpx", 1);

        }
        Wait(lv_turningtime, c_timeGame);
        if ((UnitIsAlive(lv_airplane) == true) && (UnitIsAlive(lv_airport) == true)) {
            UnitBehaviorAdd(lv_airplane, "jzsyqf", lv_airplane, 1);
            auto5606D566_val = UnitGetType(lv_airplane);
            if (auto5606D566_val == "SuBeaver") {
                UnitSetHeight(lv_airplane, 0.1, 2.0);
                UnitBehaviorSetDuration(lv_airplane, "jzsyqf", 2.0);
            }
            else {
                UnitSetHeight(lv_airplane, 0.1, 0.75);
                UnitBehaviorSetDuration(lv_airplane, "jzsyqf", 0.75);
            }
            UnitBehaviorAdd(lv_airplane, "jcfjjl", lv_airplane, 1);
            UnitBehaviorAdd(lv_airplane, "fjfxjkjc", lv_airplane, 1);
            UnitCreateEffectUnit(lv_airport, "jfjzzzjc3", lv_airplane);
            UnitBehaviorAdd(lv_airplane, "yfpcw2", lv_airplane, 1);
            UnitBehaviorRemove(lv_airplane, "yfpcw", 1);
        }
        else {
            UnitBehaviorRemove(lv_airplane, "ydsjnjzpx", 1);

        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libRED3_gt_LandingatSovietairport_Init () {
    libRED3_gt_LandingatSovietairport = TriggerCreate("libRED3_gt_LandingatSovietairport_Func");
    TriggerAddEventPlayerEffectUsed(libRED3_gt_LandingatSovietairport, c_playerAny, "jfjzzzmjjcjh2");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Landing at Shenzhou Airport
//--------------------------------------------------------------------------------------------------
bool libRED3_gt_LandingatShenzhouAirport_Func (bool testConds, bool runActions) {
    int init_i;

    // Variable Declarations
    unit lv_airport;
    unit lv_airplane;
    point lv_landingpoint;
    point lv_lowerlandingpoint;
    point lv_upperlandingpoint;
    fixed lv_angledifference;
    fixed lv_turningtime;
    int lv_aircraftheading;
    string lv_airportcustomvaluestringtotal;
    string[5] lv_airportcustomvaluestringgroup;
    int lv_useslot;

    // Automatic Variable Declarations
    const int auto1A2ABE46_ae = 4;
    int auto1A2ABE46_var;
    const int autoEB75EB9D_ae = 4;
    int autoEB75EB9D_var;
    int auto3A6CA5FF_val;
    int autoC5DF3FC7_val;
    string auto4469C530_val;

    // Variable Initialization
    lv_airportcustomvaluestringtotal = "";
    for (init_i = 0; init_i <= 4; init_i += 1) {
        lv_airportcustomvaluestringgroup[init_i] = "";
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_airplane = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_airport = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    if ((UnitGetCustomValue(lv_airport, libRED3_gv_airportcustomvalue) == 0.0)) {
        UnitSetCustomValue(lv_airport, libRED3_gv_airportcustomvalue, 1111.0);
    }

    lv_airportcustomvaluestringtotal = IntToString(FixedToInt(UnitGetCustomValue(lv_airport, libRED3_gv_airportcustomvalue)));
    auto1A2ABE46_var = 1;
    for ( ; auto1A2ABE46_var <= auto1A2ABE46_ae; auto1A2ABE46_var += 1 ) {
        lv_airportcustomvaluestringgroup[auto1A2ABE46_var] = StringSub(lv_airportcustomvaluestringtotal, auto1A2ABE46_var, auto1A2ABE46_var);
    }
    autoEB75EB9D_var = 1;
    for ( ; autoEB75EB9D_var <= autoEB75EB9D_ae; autoEB75EB9D_var += 1 ) {
        if ((lv_airportcustomvaluestringgroup[autoEB75EB9D_var] == "1")) {
            lv_useslot = autoEB75EB9D_var;
            UnitSetCustomValue(lv_airplane, libRED3_gv_aircraftcustomvalue, autoEB75EB9D_var);
            UnitBehaviorAdd(lv_airplane, "yfpcw", lv_airport, 1);
            lv_airportcustomvaluestringgroup[autoEB75EB9D_var] = "2";
            lv_airportcustomvaluestringtotal = (lv_airportcustomvaluestringgroup[1] + lv_airportcustomvaluestringgroup[2] + lv_airportcustomvaluestringgroup[3] + lv_airportcustomvaluestringgroup[4]);
            UnitSetCustomValue(lv_airport, libRED3_gv_airportcustomvalue, StringToFixed(lv_airportcustomvaluestringtotal));
            break;
        }

    }
    lv_upperlandingpoint = PointWithOffsetPolar(UnitGetPosition(lv_airport), -1.0, UnitGetFacing(lv_airport));
    lv_lowerlandingpoint = PointWithOffsetPolar(UnitGetPosition(lv_airport), 1.0, UnitGetFacing(lv_airport));
    auto3A6CA5FF_val = lv_useslot;
    if (auto3A6CA5FF_val == 1) {
        lv_landingpoint = PointWithOffsetPolar(lv_lowerlandingpoint, 2.3, (UnitGetFacing(lv_airport) + 90.0));
        lv_aircraftheading = 315;
    }
    else if (auto3A6CA5FF_val == 2) {
        lv_landingpoint = PointWithOffsetPolar(lv_lowerlandingpoint, 2.3, (UnitGetFacing(lv_airport) - 90.0));
        lv_aircraftheading = 135;
    }
    else if (auto3A6CA5FF_val == 3) {
        lv_landingpoint = PointWithOffsetPolar(lv_upperlandingpoint, 2.3, (UnitGetFacing(lv_airport) - 90.0));
        lv_aircraftheading = 135;
    }
    else if (auto3A6CA5FF_val == 4) {
        lv_landingpoint = PointWithOffsetPolar(lv_upperlandingpoint, 2.3, (UnitGetFacing(lv_airport) + 90.0));
        lv_aircraftheading = 315;
    }
    else {
    }
    UnitIssueOrder(lv_airplane, OrderTargetingPoint(AbilityCommand("move", 0), lv_landingpoint), c_orderQueueReplace);
    UnitIssueOrder(lv_airplane, OrderTargetingPoint(AbilityCommand("move2", 0), lv_landingpoint), c_orderQueueReplace);
    UnitIssueOrder(lv_airplane, OrderTargetingPoint(AbilityCommand("move22", 0), lv_landingpoint), c_orderQueueReplace);
    while (!(((UnitIsAlive(lv_airplane) == false) || (UnitIsAlive(lv_airport) == false) || (DistanceBetweenPoints(UnitGetPosition(lv_airplane), lv_landingpoint) < 0.5)))) {
        Wait(0.5, c_timeGame);
    }
    if (((UnitIsAlive(lv_airplane) == false) || (UnitIsAlive(lv_airport) == false))) {

    }
    else {
        autoC5DF3FC7_val = lv_useslot;
        if (autoC5DF3FC7_val == 1) {
            libNtve_gf_SendActorMessageToUnit(lv_airport, "AnimBracketStart A Stand,Work,Start,A Stand,Work,A Stand,Work,End,A FullMatch");
        }
        else if (autoC5DF3FC7_val == 2) {
            libNtve_gf_SendActorMessageToUnit(lv_airport, "AnimBracketStart B Stand,Work,Start,B Stand,Work,B Stand,Work,End,B FullMatch");
        }
        else if (autoC5DF3FC7_val == 3) {
            libNtve_gf_SendActorMessageToUnit(lv_airport, "AnimBracketStart C Stand,Work,Start,C Stand,Work,C Stand,Work,End,C FullMatch");
        }
        else if (autoC5DF3FC7_val == 4) {
            libNtve_gf_SendActorMessageToUnit(lv_airport, "AnimBracketStart D Stand,Work,Start,D Stand,Work,D Stand,Work,End,D FullMatch");
        }
        else {
        }
        Wait(0.5, c_timeGame);
        if ((UnitIsAlive(lv_airplane) == true) && (UnitIsAlive(lv_airport) == true)) {
            lv_angledifference = libRED3_gf_Angledifferencebetweenunitandtargetpoint(lv_airplane, PointWithOffsetPolar(lv_landingpoint, 1.0, lv_aircraftheading));
            lv_turningtime = (lv_angledifference / UnitGetPropertyFixed(lv_airplane, c_unitPropTurnRate, c_unitPropCurrent));
            if ((lv_turningtime >= 1)) {
                lv_turningtime = 1.0;
            }

            UnitSetFacing(lv_airplane, lv_aircraftheading, lv_turningtime);
        }
        else {
            UnitBehaviorRemove(lv_airplane, "ydsjnjzpx", 1);

        }
        Wait(lv_turningtime, c_timeGame);
        if ((UnitIsAlive(lv_airplane) == true) && (UnitIsAlive(lv_airport) == true)) {
            UnitBehaviorAdd(lv_airplane, "jzsyqf", lv_airplane, 1);
            auto4469C530_val = UnitGetType(lv_airplane);
            if (auto4469C530_val == "CnH20StealthBomber") {
                UnitSetHeight(lv_airplane, 0.1, 2.0);
                UnitBehaviorSetDuration(lv_airplane, "jzsyqf", 2.0);
            }
            else {
                UnitSetHeight(lv_airplane, 0.1, 0.75);
                UnitBehaviorSetDuration(lv_airplane, "jzsyqf", 0.75);
            }
            UnitBehaviorAdd(lv_airplane, "jcfjjl", lv_airplane, 1);
            UnitBehaviorAdd(lv_airplane, "fjfxjkjc", lv_airplane, 1);
            UnitCreateEffectUnit(lv_airport, "jfjzzzjc3", lv_airplane);
            UnitBehaviorAdd(lv_airplane, "yfpcw2", lv_airplane, 1);
            UnitBehaviorRemove(lv_airplane, "yfpcw", 1);
        }
        else {
            UnitBehaviorRemove(lv_airplane, "ydsjnjzpx", 1);

        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libRED3_gt_LandingatShenzhouAirport_Init () {
    libRED3_gt_LandingatShenzhouAirport = TriggerCreate("libRED3_gt_LandingatShenzhouAirport_Func");
    TriggerAddEventPlayerEffectUsed(libRED3_gt_LandingatShenzhouAirport, c_playerAny, "jfjzzzmjjcjh22");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Aircraft restoration slot
//--------------------------------------------------------------------------------------------------
bool libRED3_gt_Aircraftrestorationslot_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_airport;
    unit lv_airplane;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_airplane = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_airport = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    libRED3_gf_Restoreairportslotsbasedonaircraftcustomvalues(lv_airplane, lv_airport);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libRED3_gt_Aircraftrestorationslot_Init () {
    libRED3_gt_Aircraftrestorationslot = TriggerCreate("libRED3_gt_Aircraftrestorationslot_Func");
    TriggerAddEventPlayerEffectUsed(libRED3_gt_Aircraftrestorationslot, c_playerAny, "zjswmjxg");
}

//--------------------------------------------------------------------------------------------------
// Trigger: The effect of the plane after takeoff
//--------------------------------------------------------------------------------------------------
bool libRED3_gt_Theeffectoftheplaneaftertakeoff_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_airport;
    unit lv_airplane;
    fixed lv_waitingtime;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    libRED3_gf_Theplanetakesoff(EventPlayerEffectUsedUnit(c_effectUnitCaster));
    lv_waitingtime = UnitBehaviorDurationTotal(EventPlayerEffectUsedUnit(c_effectUnitCaster), "qfydsjnjzwqhzx");
    Wait(lv_waitingtime, c_timeGame);
    UnitIssueOrder(EventPlayerEffectUsedUnit(c_effectUnitCaster), OrderTargetingPoint(null, EventPlayerEffectUsedPoint(c_effectLocationTargetPoint)), c_orderQueueReplace);
    UnitIssueOrder(EventPlayerEffectUsedUnit(c_effectUnitCaster), OrderTargetingUnit(null, EventPlayerEffectUsedUnit(c_effectUnitTarget)), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libRED3_gt_Theeffectoftheplaneaftertakeoff_Init () {
    libRED3_gt_Theeffectoftheplaneaftertakeoff = TriggerCreate("libRED3_gt_Theeffectoftheplaneaftertakeoff_Func");
    TriggerAddEventPlayerEffectUsed(libRED3_gt_Theeffectoftheplaneaftertakeoff, c_playerAny, "zjswmjxg2");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Fighter planes are short of ammunition and looking for airfields
//--------------------------------------------------------------------------------------------------
bool libRED3_gt_Fighterplanesareshortofammunitionandlookingforairfields_Func (bool testConds, bool runActions) {
    int init_i;

    // Variable Declarations
    unit lv_airport;
    unit lv_airplane;
    string lv_airportcustomvaluestringtotal;
    string[5] lv_airportcustomvaluestringgroup;
    int lv_useslot;
    unitgroup lv_airportunitgroup;

    // Automatic Variable Declarations
    unitgroup autoB76FB5E7_g;
    int autoB76FB5E7_u;
    unit autoB76FB5E7_var;
    unitgroup autoF0FC21C7_g;
    int autoF0FC21C7_u;
    unit autoF0FC21C7_var;
    unitgroup auto6DEB077B_g;
    int auto6DEB077B_u;
    unit auto6DEB077B_var;

    // Variable Initialization
    lv_airportcustomvaluestringtotal = "";
    for (init_i = 0; init_i <= 4; init_i += 1) {
        lv_airportcustomvaluestringgroup[init_i] = "";
    }
    lv_airportunitgroup = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_airplane = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    autoB76FB5E7_g = UnitGroup("AuAirport", EventPlayer(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoB76FB5E7_u = UnitGroupCount(autoB76FB5E7_g, c_unitCountAll);
    for (;; autoB76FB5E7_u -= 1) {
        autoB76FB5E7_var = UnitGroupUnitFromEnd(autoB76FB5E7_g, autoB76FB5E7_u);
        if (autoB76FB5E7_var == null) { break; }
        if ((UnitGetCustomValue(autoB76FB5E7_var, libRED3_gv_airportcustomvalue) != 2222.0)) {
            UnitGroupAdd(lv_airportunitgroup, autoB76FB5E7_var);
        }

    }
    autoF0FC21C7_g = UnitGroup("SuAirport", EventPlayer(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoF0FC21C7_u = UnitGroupCount(autoF0FC21C7_g, c_unitCountAll);
    for (;; autoF0FC21C7_u -= 1) {
        autoF0FC21C7_var = UnitGroupUnitFromEnd(autoF0FC21C7_g, autoF0FC21C7_u);
        if (autoF0FC21C7_var == null) { break; }
        if ((UnitGetCustomValue(autoF0FC21C7_var, libRED3_gv_airportcustomvalue) != 2222.0)) {
            UnitGroupAdd(lv_airportunitgroup, autoF0FC21C7_var);
        }

    }
    auto6DEB077B_g = UnitGroup("CnAirport", EventPlayer(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto6DEB077B_u = UnitGroupCount(auto6DEB077B_g, c_unitCountAll);
    for (;; auto6DEB077B_u -= 1) {
        auto6DEB077B_var = UnitGroupUnitFromEnd(auto6DEB077B_g, auto6DEB077B_u);
        if (auto6DEB077B_var == null) { break; }
        if ((UnitGetCustomValue(auto6DEB077B_var, libRED3_gv_airportcustomvalue) != 2222.0)) {
            UnitGroupAdd(lv_airportunitgroup, auto6DEB077B_var);
        }

    }
    lv_airport = UnitGroupClosestToPoint(lv_airportunitgroup, UnitGetPosition(lv_airplane));
    UnitIssueOrder(lv_airplane, OrderTargetingPoint(AbilityCommand("move22", 0), UnitGetPosition(lv_airport)), c_orderQueueReplace);
    UnitIssueOrder(lv_airplane, OrderTargetingUnit(null, lv_airport), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libRED3_gt_Fighterplanesareshortofammunitionandlookingforairfields_Init () {
    libRED3_gt_Fighterplanesareshortofammunitionandlookingforairfields = TriggerCreate("libRED3_gt_Fighterplanesareshortofammunitionandlookingforairfields_Func");
    TriggerAddEventPlayerEffectUsed(libRED3_gt_Fighterplanesareshortofammunitionandlookingforairfields, c_playerAny, "zjqfdyxzjc");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Allied fighter planes automatically circle when stopped 2
//--------------------------------------------------------------------------------------------------
bool libRED3_gt_Alliedfighterplanesautomaticallycirclewhenstopped2_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_attackingunit;
    fixed lv_angle;
    point lv_centerpoint;
    point lv_movetargetpoint;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((((UnitGetType(EventPlayerEffectUsedUnit(c_effectUnitCaster)) == "AlliedVindicator") || (UnitGetType(EventPlayerEffectUsedUnit(c_effectUnitCaster)) == "AlliedCenturyBomber")) && (UnitBehaviorCount(EventPlayerEffectUsedUnit(c_effectUnitCaster), "xfjytzzdpx") == 0) && (UnitBehaviorCount(EventPlayerEffectUsedUnit(c_effectUnitCaster), "xfjytzzdpx2") == 0)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_attackingunit = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_angle = (UnitGetFacing(lv_attackingunit) - 150.0);
    lv_centerpoint = PointWithOffsetPolar(UnitGetPosition(lv_attackingunit), 0.1, lv_angle);
    while (true) {
        if (((UnitIsAlive(lv_attackingunit) == true) && (UnitBehaviorCount(lv_attackingunit, "xfjytzzdpx") == 0) && (UnitBehaviorCount(lv_attackingunit, "xfjytzzdpx2") == 0) && (UnitBehaviorCount(lv_attackingunit, "xfjytzzdpx222") == 0) && (UnitBehaviorCount(lv_attackingunit, "ra3qfdy2") == 0) && (UnitBehaviorCount(lv_attackingunit, "ra3qfdy") == 0))) {
            libRED3_gf_OnecruisewhilestationaryAlliedfighteraircraft(lv_attackingunit, lv_centerpoint);
            Wait(0.0625, c_timeGame);
        }
        else {
            break;
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libRED3_gt_Alliedfighterplanesautomaticallycirclewhenstopped2_Init () {
    libRED3_gt_Alliedfighterplanesautomaticallycirclewhenstopped2 = TriggerCreate("libRED3_gt_Alliedfighterplanesautomaticallycirclewhenstopped2_Func");
    TriggerAddEventPlayerEffectUsed(libRED3_gt_Alliedfighterplanesautomaticallycirclewhenstopped2, c_playerAny, "xfwrmjxg2");
}

void libRED3_InitTriggers () {
    libRED3_gt_Unitupgradespecialeffects_Init();
    libRED3_gt_Unitsgainexperiencebyrisingstars_Init();
    libRED3_gt_Playercommanderrepairpanelsettings_Init();
    libRED3_gt_BrainwashingmusicthatactivatestheZhigeforcefield_Init();
    libRED3_gt_PlayercommanderE28099schoiceofswitchingmusic_Init();
    libRED3_gt_InitialminecartsoundeffectSoviet_Init();
    libRED3_gt_InitialminecartsoundeffectEmpire_Init();
    libRED3_gt_InitialminecartsoundeffectShenzhou_Init();
    libRED3_gt_InitialminecartsoundeffectAllies_Init();
    libRED3_gt_Alliesbuildvoicetrigger_Init();
    libRED3_gt_EmpireBuildingVoiceTrigger_Init();
    libRED3_gt_Chinabuildsvoicetriggers_Init();
    libRED3_gt_NewConstrrctuionOptionsAvailable_Init();
    libRED3_gt_UnitlossChina_Init();
    libRED3_gt_UnitlossAllies_Init();
    libRED3_gt_UnitlossSoviet_Init();
    libRED3_gt_UnitlossEmpire_Init();
    libRED3_gt_AlliedRepairPanelSettings_Init();
    libRED3_gt_ChaowupanelUIproduction_Init();
    libRED3_gt_TimeandSpaceTeleportationSticky_Init();
    libRED3_gt_Clearthecoverafterteleportation_Init();
    libRED3_gt_Clearthecoveraftertheteleportationiscancelled_Init();
    libRED3_gt_Synchronoushiddenupgraderesearchcompleted_Init();
    libRED3_gt_Enemiesarereducedinsize_Init();
    libRED3_gt_Enemiesarerestoredafterbeingreducedinsize_Init();
    libRED3_gt_Maintenancebeeheightadjustment_Init();
    libRED3_gt_Maintenancebeeheightrestored_Init();
    libRED3_gt_Selectairport_Init();
    libRED3_gt_Selectalltankfactories_Init();
    libRED3_gt_Selectallbarracks_Init();
    libRED3_gt_ActiveskillLightningStorm2_Init();
    libRED3_gt_ActiveskillLawknowingspecialskill_Init();
    libRED3_gt_Pioneermobileresetcd_Init();
    libRED3_gt_VanguardAttackSurround_Init();
    libRED3_gt_Pioneerautomaticallycirclesnewwhenstopped_Init();
    libRED3_gt_Aircraftmanufacturingcompleted_Init();
    libRED3_gt_Alliedairfieldlanding_Init();
    libRED3_gt_LandingatSovietairport_Init();
    libRED3_gt_LandingatShenzhouAirport_Init();
    libRED3_gt_Aircraftrestorationslot_Init();
    libRED3_gt_Theeffectoftheplaneaftertakeoff_Init();
    libRED3_gt_Fighterplanesareshortofammunitionandlookingforairfields_Init();
    libRED3_gt_Alliedfighterplanesautomaticallycirclewhenstopped2_Init();
}

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
bool libRED3_InitLib_completed = false;

void libRED3_InitLib () {
    if (libRED3_InitLib_completed) {
        return;
    }

    libRED3_InitLib_completed = true;

    libRED3_InitLibraries();
    libRED3_InitVariables();
    libRED3_InitTriggers();
}

